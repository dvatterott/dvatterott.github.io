<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Data Science | Dan Vatterott]]></title>
  <link href="https://danvatterott.com/blog/categories/data-science/atom.xml" rel="self"/>
  <link href="https://danvatterott.com/"/>
  <updated>2019-05-25T11:47:20-05:00</updated>
  <id>https://danvatterott.com/</id>
  <author>
    <name><![CDATA[Dan Vatterott]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Data Science Lessons Learned the Hard Way: Coding]]></title>
    <link href="https://danvatterott.com/blog/2019/05/19/data-science-lessons-learned-the-hard-way-coding/"/>
    <updated>2019-05-19T08:44:27-05:00</updated>
    <id>https://danvatterott.com/blog/2019/05/19/data-science-lessons-learned-the-hard-way-coding</id>
    <content type="html"><![CDATA[<p>You could summarize this post as “you will never regret good code practices” or “no project is too small for good code practices”.</p>

<p>You might think these recommendations are not worth the time when a project seems small, but projects often grow over time. If you use good practices from the start, you will reduce the <a href="https://en.wikipedia.org/wiki/Technical_debt">technical debt</a> your project accrues over time.</p>

<p>Here’s my list of coding Data Science lessons learned the hard way.</p>

<ol>
  <li>
    <p>You will never regret using git.</p>

    <p>You might think, “this project/query is just 15 minutes of code and I will never think about it again”. While this might be true, it often is not. If your project/query is useful, people will ask for it again with slight tweaks. With each ask, the project grows a little. By using git, you persist the project at all change points, acknowledge that the project  will change over time, and prepare for multiple contributors.
<br />
Even if you never use these features, I’ve found that simply using git encourages other good practices.
Also, remember <a href="https://ohshitgit.com/">git can rescue</a> you when things go wrong!</p>
  </li>
  <li>
    <p>You will never regret good documentation.</p>

    <p>Again, you might think, “this project is so tiny and simple, how could I ever forget how it works??”. You will forget. Or another contributor will appreciate documentation.<br />
The <a href="https://docs.scipy.org/doc/numpy/docs/howto_document.html">numpy documentation framework</a> is great when working in python. Its <a href="https://numpydoc.readthedocs.io/en/latest/">integration</a> with <a href="http://www.sphinx-doc.org/en/stable/">sphinx </a> can save you a lot of time when creating non-code documentation.<br />
I recently started documenting not only <em>what the code is doing</em>, but the business rule dictating <em>what the code should do</em>. Having both lets contributors know not only know the <em>how</em> of the code but also the <em>why</em>.</p>
  </li>
  <li>
    <p>You will never regret building unit-tests.</p>

    <p>Again, this might feel like over-kill in small projects, but even small projects have assumptions that should be tested. This is especially true when you add new features after stepping away from a project. By including unit-tests, you assure yourself that existing features did not break, making those pushes to production <a href="https://dev.to/quii/why-you-should-deploy-on-friday-afternoon-285h">less scary</a>.</p>
  </li>
  <li>
    <p>Take the time to build infrastructure for gathering/generating sample/fake data.</p>

    <p>I’ve found myself hesitant to build unit-tests because it’s hard to acquire/generate useful sample/fake data. Do not let this be a blocker to good code practices! Take the time to build infrastructure that makes good code practices easy.
This could mean taking the time to write code for building fake data. This could mean taking the time to acquire useful sample data. Maybe it’s both! Take the time to do it. You will not regret making it easy to write tests.</p>
  </li>
  <li>
    <p>You will always find a Makefile useful.</p>

    <p>Once you’ve built infrastructure for acquiring fake or sample data, you will need a way to bring this data into your current project. I’ve found <a href="https://en.wikipedia.org/wiki/Makefile">Makefiles</a> useful for this sort of thing. You can define a command that will download some sample data from s3 (or wherever) and save it to your repo (but don’t track these files on git!).<br />
This way all contributors will have common testing data, stored outside of git, and can acquire this data with a single, easy to remember, command.<br />
MakeFiles are also great for installing or saving a project’s dependencies.</p>
  </li>
  <li>
    <p>Know your project’s dependencies.</p>

    <p>Code ecosystems change over time. When you revisit a project after a break, the last thing you want is to guess what code dependencies have broken.
It doesn’t matter whether you save your project’s dependencies as a anaconda environment, a requirements file, virtualenv, a docker image, whatever. Just make sure to save it. Any future contributors (including yourself!!) will thank you.</p>
  </li>
</ol>

<p>Most these individual points seem obvious. The overarching point is no project is too small for good code practices. Sure you might think, oh this is just a single query, but you will run that query again, or another member of your team will! While you shouldn’t build a repo for each query, building a <a href="https://caitlinhudon.com/2018/11/28/git-sql-together/">repo for different sets of queries is not a bad idea</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Are Some Mlb Players More Likely to Hit Into Errors Than Others?]]></title>
    <link href="https://danvatterott.com/blog/2019/04/19/are-some-mlb-players-more-likely-to-hit-into-errors-than-others/"/>
    <updated>2019-04-19T11:02:56-05:00</updated>
    <id>https://danvatterott.com/blog/2019/04/19/are-some-mlb-players-more-likely-to-hit-into-errors-than-others</id>
    <content type="html"><![CDATA[<p>I recently found myself wondering if some baseball players are more likely to hit into errors than others. In theory, the answer should be “no” since fielders produce errors regardless of who is hitting. Nonetheless, it’s also possible that some hitters “force” errors by hitting the ball harder or running to first base faster.</p>

<p>In order to evaluate this possibility, I found play-by-play data on <a href="https://www.retrosheet.org/">retrosheet.org</a>. This data contains row by row data describing each event (e.g., a hit, stolen base etc) in a baseball game. I’ve posted this analysis on <a href="https://github.com/dvatterott/mlb_errors">github</a> and will walk through it here.</p>

<p>The user is expected to input what year’s data they want. I write the code’s output for the year 2018 as comments. The code starts by downloading and unzipping the data.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">YEAR</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="nv">FILE_LOC</span><span class="o">=</span>https://www.retrosheet.org/events/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>eve.zip&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;echo “———DOWNLOAD———-“
</span><span class='line'>wget -nc <span class="nv">$FILE_LOC</span> -O ./raw_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>.zip&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;echo “———UNPACK———-“
</span><span class='line'>mkdir raw_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/
</span><span class='line'>unzip -o raw_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>.zip -d raw_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/
</span></code></pre></td></tr></table></div></figure></p>

<p>The unzipped data contain play-by-play data in files with the EVN or EVA extensions. Each team’s home stadium has its own file. I combine all the play-by play eveSSplants (.EVN and .EVA files) into a single file. I then remove all non batting events (e.g., balk, stolen base etc).</p>

<p>I also combine all the roster files (.ROS) into a single file.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c"># export playbyplay to single file</span>
</span><span class='line'>mkdir processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/
</span><span class='line'>find raw_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/ -regex ‘.*EV<span class="o">[</span>A<span class="p">|</span>N<span class="o">]</span>’ <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	xargs grep play <span class="p">&amp;</span>gt<span class="p">;</span> <span class="se">\</span>
</span><span class='line'>	./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/playbyplay.out&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;get-all-plate-appearances-from-data-and-hitter-remove-all-non-plate-appearance-rows&quot;</span>&gt;get all plate appearances from data <span class="o">(</span>and hitter<span class="o">)</span>. remove all non plate appearance rows&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;cat ./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/playbyplay.out <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	awk -F’,’ ‘<span class="o">{</span>print <span class="nv">$4</span>”,”<span class="nv">$7</span><span class="o">}</span>’ <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	grep -Ev ‘,<span class="o">[</span>A-Z<span class="o">]{</span>3<span class="o">}[</span>0-9<span class="o">]{</span>2<span class="o">}</span>’ <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	grep -Ev ‘,<span class="o">(</span>NP<span class="p">|</span>BK<span class="p">|</span>CS<span class="p">|</span>DI<span class="p">|</span>OA<span class="p">|</span>PB<span class="p">|</span>WP<span class="p">|</span>PO<span class="p">|</span>POCS<span class="p">|</span>SB<span class="p">|</span>FLE<span class="o">)</span>’ <span class="p">&amp;</span>gt<span class="p">;</span> <span class="se">\</span>
</span><span class='line'>	./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/batters.out&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;one-giant-roster-file&quot;</span>&gt;one giant roster file&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;find raw_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/ -name ‘*ROS’ <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	xargs awk -F’,’ ‘<span class="o">{</span>print <span class="nv">$1</span>” “<span class="nv">$2</span>” “<span class="nv">$3</span><span class="o">}</span>’ <span class="p">&amp;</span>gt<span class="p">;</span> <span class="se">\</span>
</span><span class='line'>	./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/players.out
</span></code></pre></td></tr></table></div></figure></p>

<p>In this next few code blocks I print some data just to see what I am working with. For instance, I print out players with the most plate appearances. I was able to confirm these numbers with <a href="https://baseball-reference.com">baseball-reference</a>. This operation requires me to groupby player and count the rows. I join this file with the roster file to get player’s full names.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> “———PLAYERS WITH MOST PLATE APPEARANCES———-“
</span><span class='line'>cat ./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/batters.out <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	awk -F, ‘<span class="o">{</span>a<span class="o">[</span><span class="nv">$1</span><span class="o">]</span>++<span class="p">;</span><span class="o">}</span>END<span class="o">{</span><span class="k">for</span> <span class="o">(</span>i in a<span class="o">)</span>print i, a<span class="o">[</span>i<span class="o">]</span><span class="p">;</span><span class="o">}</span>’ <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	sort -k2 -nr <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	head <span class="p">&amp;</span>gt<span class="p">;</span> <span class="se">\</span>
</span><span class='line'>	./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/most_pa.out
</span><span class='line'>join <span class="p">&amp;</span>lt<span class="p">;</span><span class="o">(</span>sort -k <span class="m">1</span> ./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/players.out<span class="o">)</span> <span class="p">&amp;</span>lt<span class="p">;</span><span class="o">(</span>sort -k <span class="m">1</span> ./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/most_pa.out<span class="o">)</span> <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	uniq <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	sort -k <span class="m">4</span> -nr <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	head <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	awk ‘<span class="o">{</span>print <span class="nv">$3</span>”, “<span class="nv">$2</span>”, “<span class="nv">$4</span><span class="o">}</span>’&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;players-with-most-plate-appearances----------&quot;</span>&gt;———PLAYERS WITH MOST PLATE APPEARANCES———-&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;#Francisco, Lindor, 745
</span><span class='line'><span class="c">#Trea, Turner, 740</span>
</span><span class='line'><span class="c">#Manny, Machado, 709</span>
</span><span class='line'><span class="c">#Cesar, Hernandez, 708</span>
</span><span class='line'><span class="c">#Whit, Merrifield, 707</span>
</span><span class='line'><span class="c">#Freddie, Freeman, 707</span>
</span><span class='line'><span class="c">#Giancarlo, Stanton, 706</span>
</span><span class='line'><span class="c">#Nick, Markakis, 705</span>
</span><span class='line'><span class="c">#Alex, Bregman, 705</span>
</span><span class='line'><span class="c">#Marcus, Semien, 703</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Here’s the players with the most hits. Notice that I filter out all non-hits in the grep, then group by player.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> “———PLAYERS WITH MOST HITS———-“
</span><span class='line'>cat ./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/batters.out <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	grep -E ‘,<span class="o">(</span>S<span class="p">|</span>D<span class="p">|</span>T<span class="p">|</span>HR<span class="o">)</span>’ <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	awk -F, ‘<span class="o">{</span>a<span class="o">[</span><span class="nv">$1</span><span class="o">]</span>++<span class="p">;</span><span class="o">}</span>END<span class="o">{</span><span class="k">for</span> <span class="o">(</span>i in a<span class="o">)</span>print i, a<span class="o">[</span>i<span class="o">]</span><span class="p">;</span><span class="o">}</span>’ <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	sort -k2 -nr <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	head&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;players-with-most-hits----------&quot;</span>&gt;———PLAYERS WITH MOST HITS———-&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;#merrw001 192
</span><span class='line'><span class="c">#freef001 191</span>
</span><span class='line'><span class="c">#martj006 188</span>
</span><span class='line'><span class="c">#machm001 188</span>
</span><span class='line'><span class="c">#yelic001 187</span>
</span><span class='line'><span class="c">#markn001 185</span>
</span><span class='line'><span class="c">#castn001 185</span>
</span><span class='line'><span class="c">#lindf001 183</span>
</span><span class='line'><span class="c">#peraj003 182</span>
</span><span class='line'><span class="c">#blacc001 182</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Here’s the players with the most at-bats.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> “———PLAYERS WITH MOST AT BATS———-“
</span><span class='line'>cat ./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/batters.out <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	grep -Ev ‘SF<span class="p">|</span>SH’ <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	grep -E ‘,<span class="o">(</span>S<span class="p">|</span>D<span class="p">|</span>T<span class="p">|</span>HR<span class="p">|</span>K<span class="p">|</span><span class="o">[</span>0-9<span class="o">]</span><span class="p">|</span>E<span class="p">|</span>DGR<span class="p">|</span>FC<span class="o">)</span>’ <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	awk -F, ‘<span class="o">{</span>a<span class="o">[</span><span class="nv">$1</span><span class="o">]</span>++<span class="p">;</span><span class="o">}</span>END<span class="o">{</span><span class="k">for</span> <span class="o">(</span>i in a<span class="o">)</span>print i, a<span class="o">[</span>i<span class="o">]</span><span class="p">;</span><span class="o">}</span>’ <span class="p">&amp;</span>gt<span class="p">;</span> <span class="se">\</span>
</span><span class='line'>	./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/abs.out
</span><span class='line'>cat ./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/abs.out <span class="p">|</span> sort -k2 -nr <span class="p">|</span> head&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;players-with-most-at-bats----------&quot;</span>&gt;———PLAYERS WITH MOST AT BATS———-&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;#turnt001 664
</span><span class='line'><span class="c">#lindf001 661</span>
</span><span class='line'><span class="c">#albio001 639</span>
</span><span class='line'><span class="c">#semim001 632</span>
</span><span class='line'><span class="c">#peraj003 632</span>
</span><span class='line'><span class="c">#merrw001 632</span>
</span><span class='line'><span class="c">#machm001 632</span>
</span><span class='line'><span class="c">#blacc001 626</span>
</span><span class='line'><span class="c">#markn001 623</span>
</span><span class='line'><span class="c">#castn001 620</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And, finally, here’s the players who hit into the most errors.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> “———PLAYERS WHO HIT INTO THE MOST ERRORS———-“
</span><span class='line'>cat ./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/batters.out <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>    	grep -Ev ‘SF<span class="p">|</span>SH’ <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	grep ‘,E<span class="o">[</span>0-9<span class="o">]</span>’ <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	awk -F, ‘<span class="o">{</span>a<span class="o">[</span><span class="nv">$1</span><span class="o">]</span>++<span class="p">;</span><span class="o">}</span>END<span class="o">{</span><span class="k">for</span> <span class="o">(</span>i in a<span class="o">)</span>print i, a<span class="o">[</span>i<span class="o">]</span><span class="p">;</span><span class="o">}</span>’ <span class="p">&amp;</span>gt<span class="p">;</span> <span class="se">\</span>
</span><span class='line'>	./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/errors.out
</span><span class='line'>cat ./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/errors.out <span class="p">|</span> sort -k2 -nr <span class="p">|</span> head&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;players-who-hit-into-the-most-errors----------&quot;</span>&gt;———PLAYERS WHO HIT INTO THE MOST ERRORS———-&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;#gurry001 13
</span><span class='line'><span class="c">#casts001 13</span>
</span><span class='line'><span class="c">#baezj001 12</span>
</span><span class='line'><span class="c">#goldp001 11</span>
</span><span class='line'><span class="c">#desmi001 11</span>
</span><span class='line'><span class="c">#castn001 10</span>
</span><span class='line'><span class="c">#bogax001 10</span>
</span><span class='line'><span class="c">#andum001 10</span>
</span><span class='line'><span class="c">#turnt001 9</span>
</span><span class='line'><span class="c">#rojam002 9</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Because players with more at-bats hit into more errors, I need to take the number of at-bats into account. I also filter out all players with less than 250 at bats. I figure we only want players with lots of opportunities to create errors.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> “———PLAYERS WITH MOST ERRORS PER AT BAT———-“
</span><span class='line'>join -e”0” -a1 -a2 <span class="p">&amp;</span>lt<span class="p">;</span><span class="o">(</span>sort -k <span class="m">1</span> ./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/abs.out<span class="o">)</span> -o <span class="m">0</span> 1.2 2.2 <span class="p">&amp;</span>lt<span class="p">;</span><span class="o">(</span>sort -k <span class="m">1</span> ./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/errors.out<span class="o">)</span> <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	uniq <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	awk -v <span class="nv">OFS</span><span class="o">=</span>’, ‘ ‘<span class="nv">$2</span> <span class="p">&amp;</span>gt<span class="p">;</span> <span class="m">250</span> <span class="o">{</span>print <span class="nv">$1</span>, <span class="nv">$3</span>, <span class="nv">$2</span>, <span class="nv">$3</span>/<span class="nv">$2</span><span class="o">}</span>’ <span class="p">&amp;</span>gt<span class="p">;</span>  <span class="se">\</span>
</span><span class='line'>	./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/errors_abs.out
</span><span class='line'>cat ./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/errors_abs.out <span class="p">|</span> sort -k <span class="m">4</span> -nr <span class="p">|</span> head&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;players-with-most-errors-per-at-bat----------&quot;</span>&gt;———PLAYERS WITH MOST ERRORS PER AT BAT———-&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;#pereh001, 8, 316, 0.0253165
</span><span class='line'><span class="c">#gurry001, 13, 537, 0.0242086</span>
</span><span class='line'><span class="c">#andre001, 9, 395, 0.0227848</span>
</span><span class='line'><span class="c">#casts001, 13, 593, 0.0219224</span>
</span><span class='line'><span class="c">#desmi001, 11, 555, 0.0198198</span>
</span><span class='line'><span class="c">#baezj001, 12, 606, 0.019802</span>
</span><span class='line'><span class="c">#garca003, 7, 356, 0.0196629</span>
</span><span class='line'><span class="c">#bogax001, 10, 512, 0.0195312</span>
</span><span class='line'><span class="c">#goldp001, 11, 593, 0.0185497</span>
</span><span class='line'><span class="c">#iglej001, 8, 432, 0.0185185</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>At-bats is great but even better is to remove strike-outs and just look at occurences when a player hit the ball into play.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">echo</span> “———PLAYERS WITH MOST ERRORS PER BALL IN PLAY———-“
</span><span class='line'>cat ./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/batters.out <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	grep -Ev ‘SF<span class="p">|</span>SH’ <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	grep -E ‘,<span class="o">(</span>S<span class="p">|</span>D<span class="p">|</span>T<span class="p">|</span>HR<span class="p">|</span><span class="o">[</span>0-9<span class="o">]</span><span class="p">|</span>E<span class="p">|</span>DGR<span class="p">|</span>FC<span class="o">)</span>’ <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	awk -F, ‘<span class="o">{</span>a<span class="o">[</span><span class="nv">$1</span><span class="o">]</span>++<span class="p">;</span><span class="o">}</span>END<span class="o">{</span><span class="k">for</span> <span class="o">(</span>i in a<span class="o">)</span>print i, a<span class="o">[</span>i<span class="o">]</span><span class="p">;</span><span class="o">}</span>’ <span class="p">&amp;</span>gt<span class="p">;</span> <span class="se">\</span>
</span><span class='line'>	./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/bip.out
</span><span class='line'>join -e”0” -a1 -a2 <span class="p">&amp;</span>lt<span class="p">;</span><span class="o">(</span>sort -k <span class="m">1</span> ./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/bip.out<span class="o">)</span> -o <span class="m">0</span> 1.2 2.2 <span class="p">&amp;</span>lt<span class="p">;</span><span class="o">(</span>sort -k <span class="m">1</span> ./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/errors.out<span class="o">)</span> <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	uniq <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>	awk -v <span class="nv">OFS</span><span class="o">=</span>’, ‘ ‘<span class="nv">$2</span> <span class="p">&amp;</span>gt<span class="p">;</span> <span class="m">450</span> <span class="o">{</span>print <span class="nv">$1</span>, <span class="nv">$3</span>, <span class="nv">$2</span>, <span class="nv">$3</span>/<span class="nv">$2</span><span class="o">}</span>’ <span class="p">&amp;</span>gt<span class="p">;</span> <span class="se">\</span>
</span><span class='line'>	./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/errors_bip.out
</span><span class='line'>cat ./processed_data/<span class="k">${</span><span class="nv">YEAR</span><span class="k">}</span>/errors_bip.out <span class="p">|</span> sort -k <span class="m">4</span> -nr <span class="p">|</span> head&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;h1 <span class="nv">id</span><span class="o">=</span><span class="s2">&quot;players-with-most-errors-per-ball-in-play----------&quot;</span>&gt;———PLAYERS WITH MOST ERRORS PER BALL IN PLAY———-&lt;/h1&gt;
</span><span class='line'>&lt;p&gt;#casts001, 13, 469, 0.0277186
</span><span class='line'><span class="c">#gurry001, 13, 474, 0.0274262</span>
</span><span class='line'><span class="c">#castn001, 10, 469, 0.021322</span>
</span><span class='line'><span class="c">#andum001, 10, 476, 0.0210084</span>
</span><span class='line'><span class="c">#andeb006, 9, 461, 0.0195228</span>
</span><span class='line'><span class="c">#turnt001, 9, 532, 0.0169173</span>
</span><span class='line'><span class="c">#simma001, 8, 510, 0.0156863</span>
</span><span class='line'><span class="c">#lemad001, 7, 451, 0.0155211</span>
</span><span class='line'><span class="c">#sancc001, 7, 462, 0.0151515</span>
</span><span class='line'><span class="c">#freef001, 7, 486, 0.0144033</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Now that we’ve cleaned the data, I import it into a pandas dataframe (in python) and use a <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chisquare.html">chi-square test</a> to evaluate whether some players are more (or less) likely to hit into errors than other players. The null hypothesis is that all players are equally likely to hit into an error (note this test will never tell me who is more (or less) likely to hit into an error).</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">sys</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">scipy.stats</span> <span class="kn">import</span> <span class="n">chisquare</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">YEAR</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">DF</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="err">‘</span><span class="o">./</span><span class="n">processed_data</span><span class="o">/</span><span class="p">{}</span><span class="o">/</span><span class="n">errors_bip</span><span class="o">.</span><span class="n">out</span><span class="err">’</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">YEAR</span><span class="p">),</span>
</span><span class='line'>		 <span class="n">header</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class='line'>		 <span class="n">names</span><span class="o">=</span><span class="p">[</span><span class="err">‘</span><span class="n">player</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">errors</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">bip</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">prop_error</span><span class="err">’</span><span class="p">])</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;use-chi2-test-to-look-at-if-all-frequencies-are-equal&quot;</span><span class="o">&gt;</span><span class="n">use</span> <span class="n">chi2</span> <span class="n">test</span> <span class="n">to</span> <span class="n">look</span> <span class="n">at</span> <span class="k">if</span> <span class="nb">all</span> <span class="n">frequencies</span> <span class="n">are</span> <span class="err">“</span><span class="n">equal</span><span class="err">”</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">AVG_ERROR_RATE</span> <span class="o">=</span> <span class="n">DF</span><span class="p">[</span><span class="err">‘</span><span class="n">errors</span><span class="err">’</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span><span class="o">*</span><span class="mf">1.</span> <span class="o">/</span> <span class="n">DF</span><span class="p">[</span><span class="err">‘</span><span class="n">bip</span><span class="err">’</span><span class="p">]</span><span class="o">.</span><span class="n">sum</span><span class="p">()</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">chisquare</span><span class="p">(</span><span class="n">DF</span><span class="p">[</span><span class="err">‘</span><span class="n">errors</span><span class="err">’</span><span class="p">],</span> <span class="n">f_exp</span><span class="o">=</span><span class="p">(</span><span class="n">DF</span><span class="p">[</span><span class="err">‘</span><span class="n">bip</span><span class="err">’</span><span class="p">]</span> <span class="o">*</span> <span class="n">AVG_ERROR_RATE</span><span class="p">)</span><span class="o">.</span><span class="n">apply</span><span class="p">(</span><span class="nb">round</span><span class="p">)))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;powerdivergenceresultstatistic5917-pvalue0009&quot;</span><span class="o">&gt;</span><span class="n">Power_divergenceResult</span><span class="p">(</span><span class="n">statistic</span><span class="o">=</span><span class="mf">59.17</span><span class="p">,</span> <span class="n">pvalue</span><span class="o">=</span><span class="mf">0.009</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We do reject the null hypothesis.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complex Aggregations in PySpark]]></title>
    <link href="https://danvatterott.com/blog/2019/02/05/complex-aggregations-in-pyspark/"/>
    <updated>2019-02-05T19:09:32-06:00</updated>
    <id>https://danvatterott.com/blog/2019/02/05/complex-aggregations-in-pyspark</id>
    <content type="html"><![CDATA[<p>I’ve touched on this in <a href="https://danvatterott.com/blog/2018/09/06/python-aggregate-udfs-in-pyspark/">past posts</a>, but wanted to write a post specifically describing the power of what I call complex aggregations in PySpark.</p>

<p>The idea is that you have have a data request which initially seems to require multiple different queries, but using ‘complex aggregations’ you can create the requested data using a single query (and a single shuffle).</p>

<p>Let’s say you have a dataset like the following. You have one column (id) which is a unique key for each user, another column (group) which expresses the group that each user belongs to, and finally (value) which expresses the value of each customer. I apologize for the contrived example.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">functions</span> <span class="k">as</span> <span class="n">F</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">types</span> <span class="k">as</span> <span class="n">T</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">SparkSession</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pyspark</span> <span class="kn">import</span> <span class="n">SparkContext</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">sc</span> <span class="o">=</span> <span class="n">SparkContext</span><span class="p">(</span><span class="err">“</span><span class="n">local</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Example</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">spark</span> <span class="o">=</span> <span class="n">SparkSession</span><span class="p">(</span><span class="n">sc</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">a</span> <span class="o">=</span> <span class="n">sc</span><span class="o">.</span><span class="n">parallelize</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="err">‘</span><span class="n">a</span><span class="err">’</span><span class="p">,</span> <span class="mf">5.1</span><span class="p">],</span>
</span><span class='line'>                    <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="err">‘</span><span class="n">b</span><span class="err">’</span><span class="p">,</span> <span class="mf">2.6</span><span class="p">],</span>
</span><span class='line'>                    <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="err">‘</span><span class="n">b</span><span class="err">’</span><span class="p">,</span> <span class="mf">3.4</span><span class="p">],</span>
</span><span class='line'>                    <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="err">‘</span><span class="n">c</span><span class="err">’</span><span class="p">,</span> <span class="mf">1.7</span><span class="p">]])</span><span class="o">.</span><span class="n">toDF</span><span class="p">([</span><span class="err">‘</span><span class="nb">id</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">group</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">value</span><span class="err">’</span><span class="p">])</span>
</span><span class='line'><span class="n">a</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>          <span class="o">&lt;</span><span class="n">br</span> <span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></p>

<table style="width:100%">
 <tr>
   <th>id</th>
   <th>group</th>
   <th>value</th>
 </tr>
 <tr>
   <td>1</td>
   <td>'a'</td>
   <td>5.1</td>
 </tr>
 <tr>
   <td>2</td>
   <td>'b'</td>
   <td>2.6</td>
 </tr>
 <tr>
   <td>3</td>
   <td>'b'</td>
   <td>3.4</td>
 </tr>
 <tr>
   <td>4</td>
   <td>'c'</td>
   <td>1.7</td>
 </tr>
</table>

<p>Let’s say someone wants the average value of group a, b, and c, <em>AND</em> the average value of users in group a <em>OR</em> b, the average value of users in group b <em>OR</em> c AND the value of users in group a <em>OR</em> c. Adds a wrinkle, right? The ‘or’ clauses prevent us from using a simple groupby, and we don’t want to have to write 4 different queries.</p>

<p>Using complex aggregations, we can access all these different conditions in a single query.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">final_data</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span>
</span><span class='line'>              <span class="o">.</span><span class="n">agg</span><span class="p">(</span>
</span><span class='line'>                <span class="n">F</span><span class="o">.</span><span class="n">avg</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">when</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">group</span><span class="err">’</span><span class="p">)</span> <span class="o">==</span> <span class="err">‘</span><span class="n">a</span><span class="err">’</span><span class="p">,</span> <span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">value</span><span class="err">’</span><span class="p">))</span><span class="o">.</span><span class="n">otherwise</span><span class="p">(</span><span class="bp">None</span><span class="p">))</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="err">‘</span><span class="n">group_a_avg</span><span class="err">’</span><span class="p">),</span>
</span><span class='line'>                <span class="n">F</span><span class="o">.</span><span class="n">avg</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">when</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">group</span><span class="err">’</span><span class="p">)</span> <span class="o">==</span> <span class="err">‘</span><span class="n">b</span><span class="err">’</span><span class="p">,</span> <span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">value</span><span class="err">’</span><span class="p">))</span><span class="o">.</span><span class="n">otherwise</span><span class="p">(</span><span class="bp">None</span><span class="p">))</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="err">‘</span><span class="n">group_b_avg</span><span class="err">’</span><span class="p">),</span>
</span><span class='line'>                <span class="n">F</span><span class="o">.</span><span class="n">avg</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">when</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">group</span><span class="err">’</span><span class="p">)</span> <span class="o">==</span> <span class="err">‘</span><span class="n">c</span><span class="err">’</span><span class="p">,</span> <span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">value</span><span class="err">’</span><span class="p">))</span><span class="o">.</span><span class="n">otherwise</span><span class="p">(</span><span class="bp">None</span><span class="p">))</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="err">‘</span><span class="n">group_c_avg</span><span class="err">’</span><span class="p">),</span>
</span><span class='line'>                <span class="n">F</span><span class="o">.</span><span class="n">avg</span><span class="p">((</span><span class="n">F</span><span class="o">.</span><span class="n">when</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">group</span><span class="err">’</span><span class="p">)</span> <span class="o">==</span> <span class="err">‘</span><span class="n">a</span><span class="err">’</span><span class="p">,</span> <span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">value</span><span class="err">’</span><span class="p">))</span>
</span><span class='line'>                        <span class="o">.</span><span class="n">when</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">group</span><span class="err">’</span><span class="p">)</span> <span class="o">==</span> <span class="err">‘</span><span class="n">b</span><span class="err">’</span><span class="p">,</span> <span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">value</span><span class="err">’</span><span class="p">))</span>
</span><span class='line'>                        <span class="o">.</span><span class="n">otherwise</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">))</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="err">‘</span><span class="n">group_ab_avg</span><span class="err">’</span><span class="p">),</span>
</span><span class='line'>                <span class="n">F</span><span class="o">.</span><span class="n">avg</span><span class="p">((</span><span class="n">F</span><span class="o">.</span><span class="n">when</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">group</span><span class="err">’</span><span class="p">)</span> <span class="o">==</span> <span class="err">‘</span><span class="n">b</span><span class="err">’</span><span class="p">,</span> <span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">value</span><span class="err">’</span><span class="p">))</span>
</span><span class='line'>                        <span class="o">.</span><span class="n">when</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">group</span><span class="err">’</span><span class="p">)</span> <span class="o">==</span> <span class="err">‘</span><span class="n">c</span><span class="err">’</span><span class="p">,</span> <span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">value</span><span class="err">’</span><span class="p">))</span>
</span><span class='line'>                        <span class="o">.</span><span class="n">otherwise</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">))</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="err">‘</span><span class="n">group_bc_avg</span><span class="err">’</span><span class="p">),</span>
</span><span class='line'>                <span class="n">F</span><span class="o">.</span><span class="n">avg</span><span class="p">((</span><span class="n">F</span><span class="o">.</span><span class="n">when</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">group</span><span class="err">’</span><span class="p">)</span> <span class="o">==</span> <span class="err">‘</span><span class="n">a</span><span class="err">’</span><span class="p">,</span> <span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">value</span><span class="err">’</span><span class="p">))</span>
</span><span class='line'>                        <span class="o">.</span><span class="n">when</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">group</span><span class="err">’</span><span class="p">)</span> <span class="o">==</span> <span class="err">‘</span><span class="n">c</span><span class="err">’</span><span class="p">,</span> <span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">value</span><span class="err">’</span><span class="p">))</span>
</span><span class='line'>                        <span class="o">.</span><span class="n">otherwise</span><span class="p">(</span><span class="bp">None</span><span class="p">)</span>
</span><span class='line'>                      <span class="p">))</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="err">‘</span><span class="n">group_ac_avg</span><span class="err">’</span><span class="p">),</span>
</span><span class='line'>                <span class="p">)</span>
</span><span class='line'>              <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">final_data</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<table style="width:100%">
 <tr>
   <th>group_a_avg</th>
   <th>group_b_avg</th>
   <th>group_c_avg</th>
   <th>group_ab_avg</th>
   <th>group_ac_avg</th>
   <th>group_bc_avg</th>
 </tr>
 <tr>
   <td>5.1</td>
   <td>3.0</td>
   <td>1.7</td>
   <td>3.7</td>
   <td>3.4</td>
   <td>2.6</td>
 </tr>
</table>

<p>They key here is using  <code>when</code> to filter different data in and out of different aggregations.</p>

<p>This approach can be quite concise when used with python list comprehensions. I’ll rewrite the query above, but using a list comprehension.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">itertools</span> <span class="kn">import</span> <span class="n">combinations</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">groups</span>  <span class="o">=</span> <span class="p">[</span><span class="err">‘</span><span class="n">a</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">b</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">c</span><span class="err">’</span><span class="p">]</span>
</span><span class='line'><span class="n">combos</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">combinations</span><span class="p">(</span><span class="n">groups</span><span class="p">,</span>  <span class="mi">2</span><span class="p">)]</span>
</span><span class='line'><span class="k">print</span><span class="p">(</span><span class="n">combos</span><span class="p">)</span>
</span><span class='line'><span class="c">#[(‘a’, ‘b’), (‘a’, ‘c’), (‘b’, ‘c’)]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">single_group</span> <span class="o">=</span> <span class="p">[</span><span class="n">F</span><span class="o">.</span><span class="n">avg</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">when</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">group</span><span class="err">’</span><span class="p">)</span> <span class="o">==</span> <span class="n">x</span><span class="p">,</span> <span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">value</span><span class="err">’</span><span class="p">))</span><span class="o">.</span><span class="n">otherwise</span><span class="p">(</span><span class="bp">None</span><span class="p">))</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="err">‘</span><span class="n">group_</span><span class="o">%</span><span class="n">s_avg</span><span class="err">’</span> <span class="o">%</span> <span class="n">x</span><span class="p">)</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">groups</span><span class="p">]</span>
</span><span class='line'><span class="n">double_group</span> <span class="o">=</span> <span class="p">[</span><span class="n">F</span><span class="o">.</span><span class="n">avg</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">when</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">group</span><span class="err">’</span><span class="p">)</span> <span class="o">==</span> <span class="n">x</span><span class="p">,</span> <span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">value</span><span class="err">’</span><span class="p">))</span><span class="o">.</span><span class="n">when</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">group</span><span class="err">’</span><span class="p">)</span><span class="o">==</span><span class="n">y</span><span class="p">,</span> <span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">value</span><span class="err">’</span><span class="p">))</span><span class="o">.</span><span class="n">otherwise</span><span class="p">(</span><span class="bp">None</span><span class="p">))</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="err">‘</span><span class="n">group_</span><span class="o">%</span><span class="n">s</span><span class="o">%</span><span class="n">s_avg</span><span class="err">’</span> <span class="o">%</span> <span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">))</span> <span class="k">for</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="n">combos</span><span class="p">]</span>
</span><span class='line'><span class="n">final_data</span> <span class="o">=</span> <span class="n">a</span><span class="o">.</span><span class="n">agg</span><span class="p">(</span><span class="o">*</span><span class="n">single_group</span> <span class="o">+</span> <span class="n">double_group</span><span class="p">)</span>
</span><span class='line'><span class="n">final_data</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<table style="width:100%">
 <tr>
   <th>group_a_avg</th>
   <th>group_b_avg</th>
   <th>group_c_avg</th>
   <th>group_ab_avg</th>
   <th>group_ac_avg</th>
   <th>group_bc_avg</th>
 </tr>
 <tr>
   <td>5.1</td>
   <td>3.0</td>
   <td>1.7</td>
   <td>3.7</td>
   <td>3.4</td>
   <td>2.6</td>
 </tr>
</table>

<p>Voila! Hope you find this little trick helpful! Let me know if you have any questions or comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Predeval]]></title>
    <link href="https://danvatterott.com/blog/2019/01/29/introducing-predeval/"/>
    <updated>2019-01-29T20:27:57-06:00</updated>
    <id>https://danvatterott.com/blog/2019/01/29/introducing-predeval</id>
    <content type="html"><![CDATA[<p><a href="https://predeval.readthedocs.io/en/latest/">Predeval</a> is software designed to help you identify changes in a model’s output.</p>

<p>For instance, you might be tasked with building a model to predict churn. When you deploy this model in production, you have to wait to learn which users churned in order to know how your model performed. While Predeval will not free you from this wait, it can provide initial signals as to whether the model is producing reasonable (i.e., expected) predictions. Unexpected predictions <em>might</em> reflect a poor performing model. They also <em>might</em> reflect a change in your input data. Either way, something has changed and you will want to investigate further.</p>

<p>Using predeval, you can detect changes in model output ASAP. You can then use python’s libraries to build a surrounding alerting system that will signal a need to investigate. This system should give you additional confidence that your model is performing reasonably. Here’s a <a href="https://danvatterott.com/blog/2018/06/02/random-weekly-reminders/">post</a> where I configure an alerting system using python, mailutils, and postfix (although the alerting system is not built around predeval).</p>

<p>Predeval operates by forming expectations about what your model’s outputs will look like. For example, you might give predeval the model’s output from a validation dataset. Predeval will then compare new outputs to the outputs produced by the validation dataset, and will report whether it detects a difference.</p>

<p>Predeval works with models producing both categorical and continuous outputs.</p>

<p>Here’s an <a href="https://predeval.readthedocs.io/en/latest/usage.html#categoricalevaluator">example</a> of predeval with a model producing categorical outputs. Predeval will (by default) check whether all expected output categories are present, and whether the output categories occur at their expected frequencies (using a <a href="https://docs.scipy.org/doc/scipy-0.15.1/reference/generated/scipy.stats.chi2_contingency.html">Chi-square test of independence of variables in a contingency table</a>).</p>

<p>Here’s an <a href="https://predeval.readthedocs.io/en/latest/usage.html#continuousevaluator">example</a> of predeval with a model producing continuous outputs. Predeval will (by default) check whether the new output have a minimum lower than expected, a maximum greater than expected, a different mean, a different standard deviation, and whether the new output are distributed as expected (using a <a href="https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.stats.ks_2samp.html#scipy.stats.ks_2samp">Kolmogorov-Smirnov test</a>)</p>

<p>I’ve tried to come up with reasonable defaults for determining whether data are different, but you can also <a href="https://predeval.readthedocs.io/en/latest/usage.html#updating-test-parameters">set these thresholds yourself</a>. You can also <a href="https://predeval.readthedocs.io/en/latest/usage.html#changing-evaluation-tests">choose what comparison tests to run</a> (e.g., checking the minimum, maximum etc.).</p>

<p>You will likely need to save your predeval objects so that you can apply them to future data. Here’s an <a href="https://predeval.readthedocs.io/en/latest/usage.html#saving-and-loading-your-evaluator">example</a> of saving the objects.</p>

<p>Documentation about how to install predeval can be found <a href="https://predeval.readthedocs.io/en/latest/installation.html#installation">here</a>.</p>

<p>If you have comments about improvements or would like to <a href="https://predeval.readthedocs.io/en/latest/contributing.html">contribute</a>, please reach out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Survival Function in PySpark]]></title>
    <link href="https://danvatterott.com/blog/2018/12/07/survival-function-in-pyspark/"/>
    <updated>2018-12-07T21:13:48-06:00</updated>
    <id>https://danvatterott.com/blog/2018/12/07/survival-function-in-pyspark</id>
    <content type="html"><![CDATA[<p>Traditionally, <a href="https://en.wikipedia.org/wiki/Survival_function">survival functions</a> have been used in medical research to visualize the proportion of people who remain alive following a treatment. I often use them to understand the length of time between users creating and cancelling their subscription accounts.</p>

<p>Here, I describe how to create a survival function using PySpark. This is not a post about creating a <a href="https://en.wikipedia.org/wiki/Kaplan%E2%80%93Meier_estimator">Kaplan-Meier estimator</a> or fitting mathematical functions to survival functions. Instead, I demonstrate how to acquire the data necessary for plotting a survival function.</p>

<p>I begin by creating a SparkContext.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">SparkSession</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pyspark</span> <span class="kn">import</span> <span class="n">SparkContext</span>
</span><span class='line'><span class="n">sc</span> <span class="o">=</span> <span class="n">SparkContext</span><span class="p">(</span><span class="err">“</span><span class="n">local</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">Example</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'><span class="n">spark</span> <span class="o">=</span> <span class="n">SparkSession</span><span class="p">(</span><span class="n">sc</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Next, I load fake data into a Spark Dataframe. This is the data we will use in this example. Each row is a different user and the Dataframe has columns describing start and end dates for each user. <code>start_date</code> represents when a user created their account and <code>end_date</code> represents when a user canceled their account.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">functions</span> <span class="k">as</span> <span class="n">F</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pyspark.sql</span> <span class="kn">import</span> <span class="n">types</span> <span class="k">as</span> <span class="n">T</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">user_table</span> <span class="o">=</span> <span class="p">(</span><span class="n">sc</span><span class="o">.</span><span class="n">parallelize</span><span class="p">([[</span><span class="mi">1</span><span class="p">,</span> <span class="err">‘</span><span class="mi">2018</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mo">01</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="mi">2018</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mo">03</span><span class="err">’</span><span class="p">],</span>
</span><span class='line'>                              <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="err">‘</span><span class="mi">2018</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mo">01</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="mi">2018</span><span class="o">-</span><span class="mi">08</span><span class="o">-</span><span class="mi">17</span><span class="err">’</span><span class="p">],</span>
</span><span class='line'>                              <span class="p">[</span><span class="mi">3</span><span class="p">,</span> <span class="err">‘</span><span class="mi">2017</span><span class="o">-</span><span class="mi">12</span><span class="o">-</span><span class="mi">31</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="mi">2018</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mo">06</span><span class="err">’</span><span class="p">],</span>
</span><span class='line'>                              <span class="p">[</span><span class="mi">4</span><span class="p">,</span> <span class="err">‘</span><span class="mi">2018</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">15</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="mi">2018</span><span class="o">-</span><span class="mi">11</span><span class="o">-</span><span class="mi">16</span><span class="err">’</span><span class="p">],</span>
</span><span class='line'>                              <span class="p">[</span><span class="mi">5</span><span class="p">,</span> <span class="err">‘</span><span class="mi">2018</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mo">02</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="mi">2018</span><span class="o">-</span><span class="mo">04</span><span class="o">-</span><span class="mi">12</span><span class="err">’</span><span class="p">]])</span>
</span><span class='line'>              <span class="o">.</span><span class="n">toDF</span><span class="p">([</span><span class="err">‘</span><span class="nb">id</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">start_date</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">end_date</span><span class="err">’</span><span class="p">])</span>
</span><span class='line'>             <span class="p">)</span>
</span><span class='line'><span class="n">user_table</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<table style="width:100%">
 <tr>
   <th>id</th>
   <th>start_date</th>
   <th>end_date</th>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
 </tr>
 <tr>
   <td>2</td>
   <td>2018-01-01</td>
   <td>2018-08-17</td>
 </tr>
 <tr>
   <td>3</td>
   <td>2017-12-31</td>
   <td>2018-01-06</td>
 </tr>
 <tr>
   <td>4</td>
   <td>2018-11-15</td>
   <td>2018-11-16</td>
 </tr>
 <tr>
   <td>5</td>
   <td>2018-04-02</td>
   <td>2018-04-12</td>
 </tr>
</table>

<p>I use <code>start_date</code> and <code>end_date</code> to determine how many days each user was active following their <code>start_date</code>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">days_till_cancel</span> <span class="o">=</span> <span class="p">(</span><span class="n">user_table</span>
</span><span class='line'>                    <span class="o">.</span><span class="n">withColumn</span><span class="p">(</span><span class="err">‘</span><span class="n">days_till_cancel</span><span class="err">’</span><span class="p">,</span> <span class="n">F</span><span class="o">.</span><span class="n">datediff</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">end_date</span><span class="err">’</span><span class="p">),</span> <span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">start_date</span><span class="err">’</span><span class="p">)))</span>
</span><span class='line'>                   <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">days_till_cancel</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<table style="width:100%">
 <tr>
   <th>id</th>
   <th>start_date</th>
   <th>end_date</th>
   <th>days_till_cancel</th>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
 </tr>
 <tr>
   <td>2</td>
   <td>2018-01-01</td>
   <td>2018-08-17</td>
   <td>228</td>
 </tr>
 <tr>
   <td>3</td>
   <td>2017-12-31</td>
   <td>2018-01-06</td>
   <td>6</td>
 </tr>
 <tr>
   <td>4</td>
   <td>2018-11-15</td>
   <td>2018-11-16</td>
   <td>1</td>
 </tr>
 <tr>
   <td>5</td>
   <td>2018-04-02</td>
   <td>2018-04-12</td>
   <td>10</td>
 </tr>
</table>

<p>I use a <a href="https://spark.apache.org/docs/2.3.0/api/python/pyspark.sql.html#pyspark.sql.functions.udf">Python UDF</a> to create a vector of the numbers 0 through 13 representing our <em>period of interest</em>. The start date of our <em>period of interest</em> is a user’s <code>start_date</code>. The end date of our <em>period of interest</em> is 13 days following a user’s <code>start_date</code>. I chose 13 days as the <em>period of interest</em> for no particular reason.</p>

<p>I use <a href="https://spark.apache.org/docs/2.3.0/api/python/pyspark.sql.html#pyspark.sql.functions.explode">explode</a> to expand the numbers in each vector (i.e., 0-&gt;13) into different rows. Each user now has a row for each day in the <em>period of interest</em>.</p>

<p>I describe one user’s data below.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">create_day_list</span> <span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">udf</span><span class="p">(</span><span class="k">lambda</span><span class="p">:</span> <span class="p">[</span><span class="n">i</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">14</span><span class="p">)],</span> <span class="n">T</span><span class="o">.</span><span class="n">ArrayType</span><span class="p">(</span><span class="n">T</span><span class="o">.</span><span class="n">IntegerType</span><span class="p">()))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">relevant_days</span> <span class="o">=</span> <span class="p">(</span><span class="n">days_till_cancel</span>
</span><span class='line'>                 <span class="o">.</span><span class="n">withColumn</span><span class="p">(</span><span class="err">‘</span><span class="n">day_list</span><span class="err">’</span><span class="p">,</span> <span class="n">create_day_list</span><span class="p">())</span>
</span><span class='line'>                 <span class="o">.</span><span class="n">withColumn</span><span class="p">(</span><span class="err">‘</span><span class="n">day</span><span class="err">’</span><span class="p">,</span> <span class="n">F</span><span class="o">.</span><span class="n">explode</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">day_list</span><span class="err">’</span><span class="p">)))</span>
</span><span class='line'>                 <span class="o">.</span><span class="n">drop</span><span class="p">(</span><span class="err">‘</span><span class="n">day_list</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>                <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">relevant_days</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="nb">id</span><span class="err">’</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<table style="width:100%">
 <tr>
   <th>id</th>
   <th>start_date</th>
   <th>end_date</th>
   <th>days_till_cancel</th>
   <th>day</th>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>0</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>1</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>2</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>3</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>4</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>5</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>6</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>7</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>8</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>9</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>10</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>11</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>12</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>13</td>
 </tr>
</table>

<p>We want the proportion of users who are active <em>X</em> days after <code>start_date</code>. I create a column <code>active</code> which represents whether users are active or not. I initially assign each user a 1 in each row (1 represents active). I then overwrite 1s with 0s after a user is no longer active. I determine that a user is no longer active by comparing the values in <code>day</code> and <code>days_till_cancel</code>. When <code>day</code> is greater than <code>days_till_cancel</code>, the user is no longer active.</p>

<p>I describe one user’s data below.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">days_active</span> <span class="o">=</span> <span class="p">(</span><span class="n">relevant_days</span>
</span><span class='line'>               <span class="o">.</span><span class="n">withColumn</span><span class="p">(</span><span class="err">‘</span><span class="n">active</span><span class="err">’</span><span class="p">,</span> <span class="n">F</span><span class="o">.</span><span class="n">lit</span><span class="p">(</span><span class="mi">1</span><span class="p">))</span>
</span><span class='line'>               <span class="o">.</span><span class="n">withColumn</span><span class="p">(</span><span class="err">‘</span><span class="n">active</span><span class="err">’</span><span class="p">,</span> <span class="n">F</span><span class="o">.</span><span class="n">when</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">day</span><span class="err">’</span><span class="p">)</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">days_till_cancel</span><span class="err">’</span><span class="p">),</span> <span class="mi">0</span><span class="p">)</span><span class="o">.</span><span class="n">otherwise</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="n">active</span><span class="err">’</span><span class="p">)))</span>
</span><span class='line'>              <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">days_active</span><span class="o">.</span><span class="n">filter</span><span class="p">(</span><span class="n">F</span><span class="o">.</span><span class="n">col</span><span class="p">(</span><span class="err">‘</span><span class="nb">id</span><span class="err">’</span><span class="p">)</span> <span class="o">==</span> <span class="mi">1</span><span class="p">)</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<table style="width:100%">
 <tr>
   <th>id</th>
   <th>start_date</th>
   <th>end_date</th>
   <th>days_till_cancel</th>
   <th>day</th>
   <th>active</th>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>0</td>
   <td>1</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>1</td>
   <td>1</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>2</td>
   <td>0</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>3</td>
   <td>0</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>4</td>
   <td>0</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>5</td>
   <td>0</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>6</td>
   <td>0</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>7</td>
   <td>0</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>8</td>
   <td>0</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>9</td>
   <td>0</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>10</td>
   <td>0</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>11</td>
   <td>0</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>12</td>
   <td>0</td>
 </tr>
 <tr>
   <td>1</td>
   <td>2018-11-01</td>
   <td>2018-11-03</td>
   <td>2</td>
   <td>13</td>
   <td>0</td>
 </tr>
</table>

<p>Finally, to acquire the survival function data, I group by <code>day</code> (days following <code>start_date</code>) and average the value in <code>active</code>. This provides us with the proportion of users who are active <em>X</em> days after <code>start_date</code>.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">survival_curve</span> <span class="o">=</span> <span class="p">(</span><span class="n">days_active</span>
</span><span class='line'>                  <span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="err">‘</span><span class="n">day</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>                  <span class="o">.</span><span class="n">agg</span><span class="p">(</span>
</span><span class='line'>                      <span class="n">F</span><span class="o">.</span><span class="n">count</span><span class="p">(</span><span class="err">‘</span><span class="o">*</span><span class="err">’</span><span class="p">)</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="err">‘</span><span class="n">user_count</span><span class="err">’</span><span class="p">),</span>
</span><span class='line'>                      <span class="n">F</span><span class="o">.</span><span class="n">avg</span><span class="p">(</span><span class="err">‘</span><span class="n">active</span><span class="err">’</span><span class="p">)</span><span class="o">.</span><span class="n">alias</span><span class="p">(</span><span class="err">‘</span><span class="n">percent_active</span><span class="err">’</span><span class="p">),</span>
</span><span class='line'>                  <span class="p">)</span>
</span><span class='line'>                  <span class="o">.</span><span class="n">orderBy</span><span class="p">(</span><span class="err">‘</span><span class="n">day</span><span class="err">’</span><span class="p">)</span>
</span><span class='line'>                 <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">survival_curve</span><span class="o">.</span><span class="n">show</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<table style="width:100%">
 <tr>
   <th>day</th>
   <th>user_count</th>
   <th>percent_active</th>
 </tr>
 <tr>
   <td>0</td>
   <td>5</td>
   <td>1.0</td>
 </tr>
 <tr>
   <td>1</td>
   <td>5</td>
   <td>0.8</td>
 </tr>
 <tr>
   <td>2</td>
   <td>5</td>
   <td>0.6</td>
 </tr>
 <tr>
   <td>3</td>
   <td>5</td>
   <td>0.6</td>
 </tr>
 <tr>
   <td>4</td>
   <td>5</td>
   <td>0.6</td>
 </tr>
 <tr>
   <td>5</td>
   <td>5</td>
   <td>0.6</td>
 </tr>
 <tr>
   <td>6</td>
   <td>5</td>
   <td>0.4</td>
 </tr>
 <tr>
   <td>7</td>
   <td>5</td>
   <td>0.4</td>
 </tr>
 <tr>
   <td>8</td>
   <td>5</td>
   <td>0.4</td>
 </tr>
 <tr>
   <td>9</td>
   <td>5</td>
   <td>0.4</td>
 </tr>
 <tr>
   <td>10</td>
   <td>5</td>
   <td>0.2</td>
 </tr>
 <tr>
   <td>11</td>
   <td>5</td>
   <td>0.2</td>
 </tr>
 <tr>
   <td>12</td>
   <td>5</td>
   <td>0.2</td>
 </tr>
 <tr>
   <td>13</td>
   <td>5</td>
   <td>0.2</td>
 </tr>
</table>
]]></content>
  </entry>
  
</feed>
