<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Automation | Dan Vatterott]]></title>
  <link href="https://danvatterott.com/blog/categories/automation/atom.xml" rel="self"/>
  <link href="https://danvatterott.com/"/>
  <updated>2022-02-25T14:33:11-06:00</updated>
  <id>https://danvatterott.com/</id>
  <author>
    <name><![CDATA[Dan Vatterott]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Random Weekly Reminders]]></title>
    <link href="https://danvatterott.com/blog/2018/06/02/random-weekly-reminders/"/>
    <updated>2018-06-02T17:58:52-05:00</updated>
    <id>https://danvatterott.com/blog/2018/06/02/random-weekly-reminders</id>
    <content type="html"><![CDATA[<p>I constantly use google calendar to schedule reminder emails, but I want some of my reminders to be stochastic!</p>

<p>Google calendar wants all their events to occur on a regular basis (e.g., every Sunday), but I might want a weekly reminder email which occurs on a random day each the week.</p>

<p>I wrote a quick set of <a href="https://github.com/dvatterott/reminder_email">python scripts</a> which handle this situation.</p>

<p>The script <a href="https://github.com/dvatterott/reminder_email/blob/master/find_days.py">find_days.py</a> chooses a random day each week (over a month) on which a reminder email should be sent. These dates are piped to a text file (dates.txt). The script <a href="https://github.com/dvatterott/reminder_email/blob/master/send_email.py">send_email.py</a> reads this text file and sends a reminder email to me if the current date matches one of the dates in dates.txt.</p>

<p>I use <a href="https://help.ubuntu.com/community/CronHowto">cron</a> to automatically run these scripts on a regular basis. Cron runs find_days.py on the first of each month and runs send_email.py every day. I copied my cron script as <a href="https://github.com/dvatterott/reminder_email/blob/master/cron_job.txt">cron_job.txt</a>.</p>

<p>I use mailutils and postfix to send the reminder emails from the machine. Check out <a href="https://www.digitalocean.com/community/tutorials/how-to-install-and-configure-postfix-as-a-send-only-smtp-server-on-ubuntu-14-04">this tutorial</a> for how to set up a send only mail server. The trickiest part of this process was repeatedly telling gmail that my emails were not spam.</p>

<p>Now I receive my weekly reminder on an unknown date so I can <em>act</em> spontaneous!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Cron to Automate Jobs on Ubuntu]]></title>
    <link href="https://danvatterott.com/blog/2017/09/01/automating-jobs-on-ubuntu/"/>
    <updated>2017-09-01T17:04:17-05:00</updated>
    <id>https://danvatterott.com/blog/2017/09/01/automating-jobs-on-ubuntu</id>
    <content type="html"><![CDATA[<p>I recently spent an entire afternoon debugging a solution for automatically launching a weekly emr job.</p>

<p>Hopefully, I can save someone the same pain by writing this blog post.</p>

<p>I decided to use Cron to launch the weekly jobs. Actually launching a weekly job on Cron was not difficult. Check out the <a href="https://help.ubuntu.com/community/CronHowto">Ubuntu Cron manual</a> for a good description on how to use Cron.</p>

<p>What took me forever was realizing that <strong>Cron jobs have an extremely limited path</strong>. Because of this, specifying the complete path to executed files <strong>and their executors</strong> is necessary.</p>

<p>Below I describe how I used an ec2 instance (Ubuntu 16.04) to automatically launch this weekly job.</p>

<p>First, here is what my Cron job list looks like (call “crontab -e” in the terminal).</p>

<p>{% codeblock lang:bash %}
SHELL=/bin/bash
05 01 * * 2 $HOME/automated_jobs/production_cluster.sh
{% endcodeblock %}</p>

<p>The important thing to note here is that I am creating the variable SHELL, and $HOME is replaced by the actual path to my home directory.</p>

<p>Next, is the shell script called by Cron.</p>

<p>{% codeblock lang:bash %}
#!/bin/bash
source $HOME/.bash_profile</p>

<p>python $HOME/automated_jobs/launch_production_cluster.py
{% endcodeblock %}</p>

<p>Again, $HOME is replaced with the actual path to my home directory.</p>

<p>I had to make this shell script and the python script called within it executable (call “chmod +x” in the terminal). The reason that I used this shell script rather than directly launching the python script from Cron is I wanted access to environment variables in my bash_profile. In order to get access to them, I had to source bash_profile.</p>

<p>Finally, below I have the python file that executes the week job that I wanted. I didn’t include the code that actually launches our emr cluster because that wasn’t the hard part here, but just contact me if you would like to see it.</p>

<p>{% codeblock lang:python %}
#!$HOME/anaconda2/bin/python
import os
import sys
import datetime as dt
from subprocess import check_output</p>

<h1 id="setup-logging">setup logging</h1>
<p>old_stdout = sys.stdout
log_file = open(“production_cluster_%s.log” % dt.datetime.today().strftime(‘%Y_%m_%d’), “w”)
sys.stdout = log_file</p>

<p>print ‘created log file’</p>

<h1 id="organize-local-files-and-s3-files">organize local files and s3 files</h1>

<p>print ‘organized files’</p>

<h1 id="call-emr-cluster">call emr cluster</h1>

<p>print ‘launched production job’</p>

<h1 id="close-log-file">close log file</h1>
<p>sys.stdout = old_stdout
log_file.close()
{% endcodeblock %}</p>

<p>While the code is not included here, I use aws cli to launch my emr cluster, and I had to specify the path to aws (call “which aws” in the terminal) when making this call.</p>

<p>You might have noticed the logging I am doing in this script. I found logging both within this python script and piping the output of this script to additional logs helpful when debugging.</p>

<p>The Ubuntu Cron manual I linked above, makes it perfectly clear that my Cron path issues are common, but I wanted to post my solution in case other people needed a little guidance.</p>
]]></content>
  </entry>
  
</feed>
