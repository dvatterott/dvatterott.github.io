<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Open Source | Dan Vatterott]]></title>
  <link href="https://danvatterott.com/blog/categories/open-source/atom.xml" rel="self"/>
  <link href="https://danvatterott.com/"/>
  <updated>2023-01-14T21:39:23-06:00</updated>
  <id>https://danvatterott.com/</id>
  <author>
    <name><![CDATA[Dan Vatterott]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Are Some MLB Players More Likely to Hit Into Errors: Statistics]]></title>
    <link href="https://danvatterott.com/blog/2019/06/04/are-some-mlb-players-more-likely-to-hit-into-errors-statistics/"/>
    <updated>2019-06-04T20:04:31-05:00</updated>
    <id>https://danvatterott.com/blog/2019/06/04/are-some-mlb-players-more-likely-to-hit-into-errors-statistics</id>
    <content type="html"><![CDATA[<p>In a <a href="https://danvatterott.com/blog/2019/04/19/are-some-mlb-players-more-likely-to-hit-into-errors-munging/">previous post</a>, I described how to download and clean data for understanding how likely a baseball player is to hit into an error given that they hit the ball into play.</p>

<p>This analysis will statistically demonstrate that some players are more likely to hit into errors than others.</p>

<p>Errors are uncommon, so players hit into errors very infrequently. Estimating the likelihood of an infrequent event is hard and requires lots of data. To acquire as much data as possible, I wrote a bash script that will download data for all players between 1970 and 2018.</p>

<p>This data enables me to use data from multiple years for each player, giving me more data when estimating how likely a particular player is to hit into an error.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>%%bash&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;for i in <span class="o">{</span>1970..2018<span class="o">}</span><span class="p">;</span> <span class="k">do</span>
</span><span class='line'>    <span class="nb">echo</span> “YEAR: <span class="nv">$i</span>”
</span><span class='line'>    ../scripts/get_data.sh <span class="k">${</span><span class="nv">i</span><span class="k">}</span><span class="p">;</span>
</span><span class='line'><span class="k">done</span>&lt;/p&gt;
</span><span class='line'>
</span><span class='line'>&lt;p&gt;find processed_data/* -type f -name ‘errors_bip.out’ <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>    xargs awk ‘<span class="o">{</span>print <span class="nv">$0</span>”, “FILENAME<span class="o">}</span>’ <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>    sed s1processed_data/11g1 <span class="p">|</span> <span class="se">\</span>
</span><span class='line'>    sed s1/errors_bip.out11g1 <span class="p">&amp;</span>gt<span class="p">;</span> <span class="se">\</span>
</span><span class='line'>        processed_data/all_errors_bip.out
</span></code></pre></td></tr></table></div></figure></p>

<p>The data has 5 columns: playerid, playername, errors hit into, balls hit into play (BIP), and year. The file does not have a header.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>%%bash
</span><span class='line'>head ../processed_data/all_errors_bip.out
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>aaroh101, Hank Aaron, 8, 453, 1970
aarot101, Tommie Aaron, 0, 53, 1970
abert101, Ted Abernathy, 0, 10, 1970
adaij101, Jerry Adair, 0, 24, 1970
ageet101, Tommie Agee, 12, 480, 1970
akerj102, Jack Aker, 0, 10, 1970
alcal101, Luis Alcaraz, 1, 107, 1970
alleb105, Bernie Allen, 1, 240, 1970
alled101, Dick Allen, 4, 341, 1970
alleg101, Gene Alley, 6, 356, 1970
</code></pre>

<p>I can load the data into pandas using the following command.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pandas</span> <span class="kn">as</span> <span class="nn">pd</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">DF</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="err">‘</span><span class="o">../</span><span class="n">processed_data</span><span class="o">/</span><span class="n">all_errors_bip</span><span class="o">.</span><span class="n">out</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">header</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span>
</span><span class='line'>                 <span class="n">names</span><span class="o">=</span><span class="p">[</span><span class="err">‘</span><span class="n">playerid</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">player_name</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">errors</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">bip</span><span class="err">’</span><span class="p">,</span> <span class="err">‘</span><span class="n">year</span><span class="err">’</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">DF</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>playerid</th>
      <th>player_name</th>
      <th>errors</th>
      <th>bip</th>
      <th>year</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>aaroh101</td>
      <td>Hank Aaron</td>
      <td>8</td>
      <td>453</td>
      <td>1970</td>
    </tr>
    <tr>
      <th>1</th>
      <td>aarot101</td>
      <td>Tommie Aaron</td>
      <td>0</td>
      <td>53</td>
      <td>1970</td>
    </tr>
    <tr>
      <th>2</th>
      <td>abert101</td>
      <td>Ted Abernathy</td>
      <td>0</td>
      <td>10</td>
      <td>1970</td>
    </tr>
    <tr>
      <th>3</th>
      <td>adaij101</td>
      <td>Jerry Adair</td>
      <td>0</td>
      <td>24</td>
      <td>1970</td>
    </tr>
    <tr>
      <th>4</th>
      <td>ageet101</td>
      <td>Tommie Agee</td>
      <td>12</td>
      <td>480</td>
      <td>1970</td>
    </tr>
  </tbody>
</table>
</div>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">len</span><span class="p">(</span><span class="n">DF</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>38870
</code></pre>

<p>I have almost 39,000 year, player combinations…. a good amount of data to play with.</p>

<p>While exploring the data, I noticed that players hit into errors less frequently now than they used to. Let’s see how the probability that a player hits into an error has changed across the years.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">YEAR_DF</span> <span class="o">=</span> <span class="p">(</span><span class="n">DF</span>
</span><span class='line'>           <span class="o">.</span><span class="n">groupby</span><span class="p">(</span><span class="err">“</span><span class="n">year</span><span class="err">”</span><span class="p">)</span>
</span><span class='line'>           <span class="o">.</span><span class="n">agg</span><span class="p">({</span>
</span><span class='line'>               <span class="err">“</span><span class="n">errors</span><span class="err">”</span><span class="p">:</span> <span class="err">“</span><span class="nb">sum</span><span class="err">”</span><span class="p">,</span>
</span><span class='line'>               <span class="err">“</span><span class="n">bip</span><span class="err">”</span><span class="p">:</span> <span class="err">“</span><span class="nb">sum</span><span class="err">”</span>
</span><span class='line'>           <span class="p">})</span>
</span><span class='line'>           <span class="o">.</span><span class="n">assign</span><span class="p">(</span><span class="n">prop_error</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="err">“</span><span class="n">errors</span><span class="err">”</span><span class="p">]</span> <span class="o">/</span> <span class="n">x</span><span class="p">[</span><span class="err">“</span><span class="n">bip</span><span class="err">”</span><span class="p">])</span>
</span><span class='line'>          <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">YEAR_DF</span><span class="p">[</span><span class="err">“</span><span class="n">prop_error</span><span class="err">”</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">style</span><span class="o">=</span><span class="err">”</span><span class="n">o</span><span class="o">-</span><span class="err">“</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/mlb/error_year.png" /></p>

<p>Interestingly, the proportion of errors per BIP <a href="https://www.pinstripealley.com/2013/8/16/4623050/mlb-errors-trends-statistics">has been dropping over time</a>. I am not sure if this is a conscious effort by MLB score keepers, a change in how hitters hit, or improved fielding (but I suspect it’s the score keepers). It looks like this drop in errors per BIP leveled off around 2015. Zooming in.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">YEAR_DF</span><span class="p">[</span><span class="n">YEAR_DF</span><span class="o">.</span><span class="n">index</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">2010</span><span class="p">][</span><span class="err">“</span><span class="n">prop_error</span><span class="err">”</span><span class="p">]</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">style</span><span class="o">=</span><span class="err">”</span><span class="n">o</span><span class="o">-</span><span class="err">“</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/mlb/zoom_error_year.png" /></p>

<p>I explore this statistically in <a href="https://github.com/dvatterott/mlb_errors/blob/master/notebook/PYMC%20-%20Hierarchical%20Beta%20Binomial%20YEAR.ipynb">a jupyter notebook on my github</a>.</p>

<p>Because I don’t want year to confound the analysis, I remove all data before 2015.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">DF</span> <span class="o">=</span> <span class="n">DF</span><span class="p">[</span><span class="n">DF</span><span class="p">[</span><span class="err">“</span><span class="n">year</span><span class="err">”</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span><span class="o">=</span> <span class="mi">2015</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">len</span><span class="p">(</span><span class="n">DF</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>3591
</code></pre>

<p>This leaves me with 3500 year, player combinations.</p>

<p>Next I combine players’ data across years.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">GROUPED_DF</span> <span class="o">=</span> <span class="n">DF</span><span class="o">.</span><span class="n">groupby</span><span class="p">([</span><span class="err">“</span><span class="n">playerid</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">player_name</span><span class="err">”</span><span class="p">])</span><span class="o">.</span><span class="n">agg</span><span class="p">({</span><span class="err">“</span><span class="n">errors</span><span class="err">”</span><span class="p">:</span> <span class="err">“</span><span class="nb">sum</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">bip</span><span class="err">”</span><span class="p">:</span> <span class="err">“</span><span class="nb">sum</span><span class="err">”</span><span class="p">})</span><span class="o">.</span><span class="n">reset_index</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">GROUPED_DF</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>errors</th>
      <th>bip</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>1552.000000</td>
      <td>1552.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>3.835052</td>
      <td>324.950387</td>
    </tr>
    <tr>
      <th>std</th>
      <td>6.073256</td>
      <td>494.688755</td>
    </tr>
    <tr>
      <th>min</th>
      <td>0.000000</td>
      <td>1.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>0.000000</td>
      <td>7.000000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>1.000000</td>
      <td>69.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>5.000000</td>
      <td>437.000000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>37.000000</td>
      <td>2102.000000</td>
    </tr>
  </tbody>
</table>
</div>

<p>I want an idea for how likely players are to hit into errors.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">TOTALS</span> <span class="o">=</span> <span class="n">GROUPED_DF</span><span class="o">.</span><span class="n">agg</span><span class="p">({</span><span class="err">“</span><span class="n">errors</span><span class="err">”</span><span class="p">:</span> <span class="err">“</span><span class="nb">sum</span><span class="err">”</span><span class="p">,</span> <span class="err">“</span><span class="n">bip</span><span class="err">”</span><span class="p">:</span> <span class="err">“</span><span class="nb">sum</span><span class="err">”</span><span class="p">})</span>
</span><span class='line'><span class="n">ERROR_RATE</span> <span class="o">=</span> <span class="n">TOTALS</span><span class="p">[</span><span class="err">“</span><span class="n">errors</span><span class="err">”</span><span class="p">]</span> <span class="o">/</span> <span class="n">TOTALS</span><span class="p">[</span><span class="err">“</span><span class="n">bip</span><span class="err">”</span><span class="p">]</span>
</span><span class='line'><span class="n">ERROR_RATE</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>0.011801960251664112
</code></pre>

<p>Again, errors are very rare, so I want know how many “trials” (BIP) I need for a reasonable estimate of how likely each player is to hit into an error.</p>

<p>I’d like the majority of players to have at least 5 errors. I can estimate how many BIP that would require.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="mf">5.</span> <span class="o">/</span><span class="n">ERROR_RATE</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>423.65843413978496
</code></pre>

<p>Looks like I should require at least 425 BIP for each player. I round this to 500.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">GROUPED_DF</span> <span class="o">=</span> <span class="n">GROUPED_DF</span><span class="p">[</span><span class="n">GROUPED_DF</span><span class="p">[</span><span class="err">“</span><span class="n">bip</span><span class="err">”</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">gt</span><span class="p">;</span> <span class="mi">500</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">GROUPED_DF</span> <span class="o">=</span> <span class="n">GROUPED_DF</span><span class="o">.</span><span class="n">reset_index</span><span class="p">(</span><span class="n">drop</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">GROUPED_DF</span><span class="o">.</span><span class="n">head</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>playerid</th>
      <th>player_name</th>
      <th>errors</th>
      <th>bip</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>abrej003</td>
      <td>Jose Abreu</td>
      <td>20</td>
      <td>1864</td>
    </tr>
    <tr>
      <th>1</th>
      <td>adamm002</td>
      <td>Matt Adams</td>
      <td>6</td>
      <td>834</td>
    </tr>
    <tr>
      <th>2</th>
      <td>adrie001</td>
      <td>Ehire Adrianza</td>
      <td>2</td>
      <td>533</td>
    </tr>
    <tr>
      <th>3</th>
      <td>aguij001</td>
      <td>Jesus Aguilar</td>
      <td>2</td>
      <td>551</td>
    </tr>
    <tr>
      <th>4</th>
      <td>ahmen001</td>
      <td>Nick Ahmed</td>
      <td>12</td>
      <td>1101</td>
    </tr>
  </tbody>
</table>
</div>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">GROUPED_DF</span><span class="o">.</span><span class="n">describe</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure></p>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>errors</th>
      <th>bip</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>count</th>
      <td>354.000000</td>
      <td>354.000000</td>
    </tr>
    <tr>
      <th>mean</th>
      <td>12.991525</td>
      <td>1129.059322</td>
    </tr>
    <tr>
      <th>std</th>
      <td>6.447648</td>
      <td>428.485467</td>
    </tr>
    <tr>
      <th>min</th>
      <td>1.000000</td>
      <td>503.000000</td>
    </tr>
    <tr>
      <th>25%</th>
      <td>8.000000</td>
      <td>747.250000</td>
    </tr>
    <tr>
      <th>50%</th>
      <td>12.000000</td>
      <td>1112.000000</td>
    </tr>
    <tr>
      <th>75%</th>
      <td>17.000000</td>
      <td>1475.750000</td>
    </tr>
    <tr>
      <th>max</th>
      <td>37.000000</td>
      <td>2102.000000</td>
    </tr>
  </tbody>
</table>
</div>

<p>I’ve identified 354 players who have enough BIP for me to estimate how frequently they hit into errors.</p>

<p>Below, I plot how the likelihood of hitting into errors is distributed.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">GROUPED_DF</span><span class="p">[</span><span class="err">“</span><span class="n">prop_error</span><span class="err">”</span><span class="p">]</span> <span class="o">=</span> <span class="n">GROUPED_DF</span><span class="p">[</span><span class="err">“</span><span class="n">errors</span><span class="err">”</span><span class="p">]</span> <span class="o">/</span> <span class="n">GROUPED_DF</span><span class="p">[</span><span class="err">“</span><span class="n">bip</span><span class="err">”</span><span class="p">]</span>
</span><span class='line'><span class="n">GROUPED_DF</span><span class="p">[</span><span class="err">“</span><span class="n">prop_error</span><span class="err">”</span><span class="p">]</span><span class="o">.</span><span class="n">hist</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/mlb/error_dist.png" /></p>

<p>The question is whether someone who has hit into errors in 2% of their BIP is more likely to hit into an error than someone who has hit into errors in 0.5% of their BIP (or is this all just random variation).</p>

<p>To try and estimate this, I treat each BIP as a Bernoulli trial. Hitting into an error is a “success”. I use a Binomial distribution to model the number of “successes”. I would like to know if different players are more or less likely to hit into errors. To do this, I model each player as having their own Binomial distribution and ask whether <em>p</em> (the probability of success) differs across players.</p>

<p>To answer this question, I could use a <a href="https://docs.scipy.org/doc/scipy/reference/generated/scipy.stats.chi2_contingency.html#scipy.stats.chi2_contingency">chi square contingency test</a> but this would only tell me whether players differ at all and not which players differ.</p>

<p>The traditional way to identify which players differ is to do pairwise comparisons, but this would result in TONS of comparisons making <a href="https://en.wikipedia.org/wiki/Multiple_comparisons_problem">false positives all but certain</a>.</p>

<p>Another option is to harness Bayesian statistics and build a <a href="http://sl8r000.github.io/ab_testing_statistics/use_a_hierarchical_model/">Hierarchical Beta-Binomial model</a>. The intuition is that each player’s probability of hitting into an error is drawn from a <a href="https://en.wikipedia.org/wiki/Beta_distribution">Beta distribution</a>. I want to know whether these Beta distributions are different. I then assume I can best estimate a player’s Beta distribution by using that particular player’s data AND data from all players together.</p>

<p>The model is built so that as I accrue data about a particular player, I will trust that data more and more, relying less and less on data from all players. This is called partial pooling. <a href="https://dsaber.com/2016/08/27/analyze-your-experiment-with-a-multilevel-logistic-regression-using-pymc3%E2%80%8B/">Here’s</a> a useful explanation.</p>

<p>I largely based my analysis on <a href="https://docs.pymc.io/notebooks/hierarchical_partial_pooling.html">this</a> tutorial. Reference the tutorial for an explanation of how I choose my priors. I ended up using a greater lambda value (because the model sampled better) in the Exponential prior, and while this did lead to more extreme estimates of error likelihood, it didn’t change the basic story.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">pymc3</span> <span class="kn">as</span> <span class="nn">pm</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">numpy</span> <span class="kn">as</span> <span class="nn">np</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">theano.tensor</span> <span class="kn">as</span> <span class="nn">tt</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">with</span> <span class="n">pm</span><span class="o">.</span><span class="n">Model</span><span class="p">()</span> <span class="k">as</span> <span class="n">model</span><span class="p">:</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">phi</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">Uniform</span><span class="p">(</span><span class="s">&#39;phi&#39;</span><span class="p">,</span> <span class="n">lower</span><span class="o">=</span><span class="mf">0.0</span><span class="p">,</span> <span class="n">upper</span><span class="o">=</span><span class="mf">1.0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">kappa_log</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">Exponential</span><span class="p">(</span><span class="s">&#39;kappa_log&#39;</span><span class="p">,</span> <span class="n">lam</span><span class="o">=</span><span class="mf">25.</span><span class="p">)</span>
</span><span class='line'><span class="n">kappa</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">Deterministic</span><span class="p">(</span><span class="s">&#39;kappa&#39;</span><span class="p">,</span> <span class="n">tt</span><span class="o">.</span><span class="n">exp</span><span class="p">(</span><span class="n">kappa_log</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">rates</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">Beta</span><span class="p">(</span><span class="s">&#39;rates&#39;</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="n">phi</span><span class="o">*</span><span class="n">kappa</span><span class="p">,</span> <span class="n">beta</span><span class="o">=</span><span class="p">(</span><span class="mf">1.0</span><span class="o">-</span><span class="n">phi</span><span class="p">)</span><span class="o">*</span><span class="n">kappa</span><span class="p">,</span> <span class="n">shape</span><span class="o">=</span><span class="nb">len</span><span class="p">(</span><span class="n">GROUPED_DF</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="n">trials</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">GROUPED_DF</span><span class="p">[</span><span class="s">&quot;bip&quot;</span><span class="p">])</span>
</span><span class='line'><span class="n">successes</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">array</span><span class="p">(</span><span class="n">GROUPED_DF</span><span class="p">[</span><span class="s">&quot;errors&quot;</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="n">obs</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">Binomial</span><span class="p">(</span><span class="s">&#39;observed_values&#39;</span><span class="p">,</span> <span class="n">trials</span><span class="p">,</span> <span class="n">rates</span><span class="p">,</span> <span class="n">observed</span><span class="o">=</span><span class="n">successes</span><span class="p">)</span>
</span><span class='line'><span class="n">trace</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="mi">2000</span><span class="p">,</span> <span class="n">tune</span><span class="o">=</span><span class="mi">1000</span><span class="p">,</span> <span class="n">chains</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">cores</span><span class="o">=</span><span class="mi">2</span><span class="p">,</span> <span class="n">nuts_kwargs</span><span class="o">=</span><span class="p">{</span><span class="s">&#39;target_accept&#39;</span><span class="p">:</span> <span class="o">.</span><span class="mi">95</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>

Auto-assigning NUTS sampler...
Initializing NUTS using jitter+adapt_diag...
Multiprocess sampling (2 chains in 2 jobs)
NUTS: [rates, kappa_log, phi]
Sampling 2 chains: 100%|██████████| 6000/6000 [01:47&lt;00:00, 28.06draws/s] 
</code></pre>

<p>Check whether the model converged.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nb">max</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">score</span><span class="p">)</span> <span class="k">for</span> <span class="n">score</span> <span class="ow">in</span> <span class="n">pm</span><span class="o">.</span><span class="n">gelman_rubin</span><span class="p">(</span><span class="n">trace</span><span class="p">)</span><span class="o">.</span><span class="n">values</span><span class="p">())</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>1.0022635936332533
</code></pre>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">bfmi</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">bfmi</span><span class="p">(</span><span class="n">trace</span><span class="p">)</span>
</span><span class='line'><span class="n">max_gr</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">max</span><span class="p">(</span><span class="n">gr_stats</span><span class="p">)</span> <span class="k">for</span> <span class="n">gr_stats</span> <span class="ow">in</span> <span class="n">pm</span><span class="o">.</span><span class="n">gelman_rubin</span><span class="p">(</span><span class="n">trace</span><span class="p">)</span><span class="o">.</span><span class="n">values</span><span class="p">())</span>
</span><span class='line'><span class="p">(</span><span class="n">pm</span><span class="o">.</span><span class="n">energyplot</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span><span class="o">.</span><span class="n">set_title</span><span class="p">(</span><span class="err">“</span><span class="n">BFMI</span> <span class="o">=</span> <span class="p">{}</span>\<span class="n">nGelman</span><span class="o">-</span><span class="n">Rubin</span> <span class="o">=</span> <span class="p">{}</span><span class="err">”</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">bfmi</span><span class="p">,</span> <span class="n">max_gr</span><span class="p">)));</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/mlb/energy.png" /></p>

<p>The most challenging parameter to fit is <em>kappa</em> which modulates for the variance in the likelihood to hit into an error. I take a look at it to make sure things look as expected.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">pm</span><span class="o">.</span><span class="n">summary</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> <span class="n">varnames</span><span class="o">=</span><span class="p">[</span><span class="err">“</span><span class="n">kappa</span><span class="err">”</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></p>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>mean</th>
      <th>sd</th>
      <th>mc_error</th>
      <th>hpd_2.5</th>
      <th>hpd_97.5</th>
      <th>n_eff</th>
      <th>Rhat</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>kappa</th>
      <td>927.587178</td>
      <td>141.027597</td>
      <td>4.373954</td>
      <td>657.066554</td>
      <td>1201.922608</td>
      <td>980.288914</td>
      <td>1.000013</td>
    </tr>
  </tbody>
</table>
</div>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">pm</span><span class="o">.</span><span class="n">traceplot</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> <span class="n">varnames</span><span class="o">=</span><span class="p">[</span><span class="err">‘</span><span class="n">kappa</span><span class="err">’</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/mlb/kappa.png" /></p>

<p>I can also look at <em>phi</em>, the estimated global likelihood to hit into an error.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">pm</span><span class="o">.</span><span class="n">traceplot</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> <span class="n">varnames</span><span class="o">=</span><span class="p">[</span><span class="err">‘</span><span class="n">phi</span><span class="err">’</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/mlb/phi.png" /></p>

<p>Finally, I can look at how all players vary in their likelihood to hit into an error.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">pm</span><span class="o">.</span><span class="n">traceplot</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> <span class="n">varnames</span><span class="o">=</span><span class="p">[</span><span class="err">‘</span><span class="n">rates</span><span class="err">’</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/mlb/rate_trace.png" /></p>

<p>Obviously, the above plot is a lot to look at it, so let’s order players by how likely the model believes they are to hit in an error.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">matplotlib</span> <span class="kn">import</span> <span class="n">pyplot</span> <span class="k">as</span> <span class="n">plt</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">rate_means</span> <span class="o">=</span> <span class="n">trace</span><span class="p">[</span><span class="err">‘</span><span class="n">rates</span><span class="err">’</span><span class="p">,</span> <span class="mi">1000</span><span class="p">:]</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="n">rate_se</span> <span class="o">=</span> <span class="n">trace</span><span class="p">[</span><span class="err">‘</span><span class="n">rates</span><span class="err">’</span><span class="p">,</span> <span class="mi">1000</span><span class="p">:]</span><span class="o">.</span><span class="n">std</span><span class="p">(</span><span class="n">axis</span><span class="o">=</span><span class="mi">0</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">mean_se</span> <span class="o">=</span> <span class="p">[(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> <span class="n">y</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">GROUPED_DF</span><span class="o">.</span><span class="n">index</span><span class="p">,</span> <span class="n">rate_means</span><span class="p">,</span> <span class="n">rate_se</span><span class="p">)]</span>
</span><span class='line'><span class="n">sorted_means_se</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">mean_se</span><span class="p">,</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
</span><span class='line'><span class="n">sorted_means</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">sorted_means_se</span><span class="p">]</span>
</span><span class='line'><span class="n">sorted_se</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">sorted_means_se</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">arange</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">sorted_means</span><span class="p">))</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">sorted_means</span><span class="p">,</span> <span class="err">‘</span><span class="n">o</span><span class="err">’</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.25</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">for</span> <span class="n">x_val</span><span class="p">,</span> <span class="n">m</span><span class="p">,</span> <span class="n">se</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">sorted_means</span><span class="p">,</span> <span class="n">sorted_se</span><span class="p">):</span>
</span><span class='line'>    <span class="n">plt</span><span class="o">.</span><span class="n">plot</span><span class="p">([</span><span class="n">x_val</span><span class="p">,</span> <span class="n">x_val</span><span class="p">],</span> <span class="p">[</span><span class="n">m</span><span class="o">-</span><span class="n">se</span><span class="p">,</span> <span class="n">m</span><span class="o">+</span><span class="n">se</span><span class="p">],</span> <span class="err">‘</span><span class="n">b</span><span class="o">-</span><span class="err">‘</span><span class="p">,</span> <span class="n">alpha</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/mlb/players_ranked.png" /></p>

<p>Now, the ten players who are most likely to hit into an error.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">estimated_mean</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">summary</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> <span class="n">varnames</span><span class="o">=</span><span class="p">[</span><span class="err">“</span><span class="n">rates</span><span class="err">”</span><span class="p">])</span><span class="o">.</span><span class="n">iloc</span><span class="p">[[</span><span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">sorted_means_se</span><span class="p">[</span><span class="o">-</span><span class="mi">10</span><span class="p">:]]][</span><span class="err">“</span><span class="n">mean</span><span class="err">”</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">GROUPED_DF</span><span class="o">.</span><span class="n">loc</span><span class="p">[[</span><span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">sorted_means_se</span><span class="p">[</span><span class="o">-</span><span class="mi">10</span><span class="p">:]],</span> <span class="p">:]</span><span class="o">.</span><span class="n">assign</span><span class="p">(</span><span class="n">estimated_mean</span><span class="o">=</span><span class="n">estimated_mean</span><span class="o">.</span><span class="n">values</span><span class="p">)</span><span class="o">.</span><span class="n">iloc</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>playerid</th>
      <th>player_name</th>
      <th>errors</th>
      <th>bip</th>
      <th>prop_error</th>
      <th>estimated_mean</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>71</th>
      <td>corrc001</td>
      <td>Carlos Correa</td>
      <td>30</td>
      <td>1368</td>
      <td>0.021930</td>
      <td>0.017838</td>
    </tr>
    <tr>
      <th>227</th>
      <td>myerw001</td>
      <td>Wil Myers</td>
      <td>27</td>
      <td>1214</td>
      <td>0.022241</td>
      <td>0.017724</td>
    </tr>
    <tr>
      <th>15</th>
      <td>andre001</td>
      <td>Elvis Andrus</td>
      <td>37</td>
      <td>1825</td>
      <td>0.020274</td>
      <td>0.017420</td>
    </tr>
    <tr>
      <th>258</th>
      <td>plawk001</td>
      <td>Kevin Plawecki</td>
      <td>14</td>
      <td>528</td>
      <td>0.026515</td>
      <td>0.017200</td>
    </tr>
    <tr>
      <th>285</th>
      <td>rojam002</td>
      <td>Miguel Rojas</td>
      <td>21</td>
      <td>952</td>
      <td>0.022059</td>
      <td>0.017001</td>
    </tr>
    <tr>
      <th>118</th>
      <td>garca003</td>
      <td>Avisail Garcia</td>
      <td>28</td>
      <td>1371</td>
      <td>0.020423</td>
      <td>0.016920</td>
    </tr>
    <tr>
      <th>244</th>
      <td>pench001</td>
      <td>Hunter Pence</td>
      <td>22</td>
      <td>1026</td>
      <td>0.021442</td>
      <td>0.016875</td>
    </tr>
    <tr>
      <th>20</th>
      <td>baezj001</td>
      <td>Javier Baez</td>
      <td>23</td>
      <td>1129</td>
      <td>0.020372</td>
      <td>0.016443</td>
    </tr>
    <tr>
      <th>335</th>
      <td>turnt001</td>
      <td>Trea Turner</td>
      <td>23</td>
      <td>1140</td>
      <td>0.020175</td>
      <td>0.016372</td>
    </tr>
    <tr>
      <th>50</th>
      <td>cainl001</td>
      <td>Lorenzo Cain</td>
      <td>32</td>
      <td>1695</td>
      <td>0.018879</td>
      <td>0.016332</td>
    </tr>
  </tbody>
</table>
</div>

<p>And the 10 players who are least likely to hit in an error.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">estimated_mean</span> <span class="o">=</span> <span class="n">pm</span><span class="o">.</span><span class="n">summary</span><span class="p">(</span><span class="n">trace</span><span class="p">,</span> <span class="n">varnames</span><span class="o">=</span><span class="p">[</span><span class="err">“</span><span class="n">rates</span><span class="err">”</span><span class="p">])</span><span class="o">.</span><span class="n">iloc</span><span class="p">[[</span><span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">sorted_means_se</span><span class="p">[:</span><span class="mi">10</span><span class="p">]]][</span><span class="err">“</span><span class="n">mean</span><span class="err">”</span><span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">GROUPED_DF</span><span class="o">.</span><span class="n">loc</span><span class="p">[[</span><span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">sorted_means_se</span><span class="p">[:</span><span class="mi">10</span><span class="p">]],</span> <span class="p">:]</span><span class="o">.</span><span class="n">assign</span><span class="p">(</span><span class="n">estimated_mean</span><span class="o">=</span><span class="n">estimated_mean</span><span class="o">.</span><span class="n">values</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<div>
<style scoped="">
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
</style>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>playerid</th>
      <th>player_name</th>
      <th>errors</th>
      <th>bip</th>
      <th>prop_error</th>
      <th>estimated_mean</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>226</th>
      <td>murpd006</td>
      <td>Daniel Murphy</td>
      <td>4</td>
      <td>1680</td>
      <td>0.002381</td>
      <td>0.005670</td>
    </tr>
    <tr>
      <th>223</th>
      <td>morrl001</td>
      <td>Logan Morrison</td>
      <td>4</td>
      <td>1241</td>
      <td>0.003223</td>
      <td>0.006832</td>
    </tr>
    <tr>
      <th>343</th>
      <td>vottj001</td>
      <td>Joey Votto</td>
      <td>8</td>
      <td>1724</td>
      <td>0.004640</td>
      <td>0.007112</td>
    </tr>
    <tr>
      <th>239</th>
      <td>panij002</td>
      <td>Joe Panik</td>
      <td>7</td>
      <td>1542</td>
      <td>0.004540</td>
      <td>0.007245</td>
    </tr>
    <tr>
      <th>51</th>
      <td>calhk001</td>
      <td>Kole Calhoun</td>
      <td>9</td>
      <td>1735</td>
      <td>0.005187</td>
      <td>0.007413</td>
    </tr>
    <tr>
      <th>55</th>
      <td>carpm002</td>
      <td>Matt Carpenter</td>
      <td>8</td>
      <td>1566</td>
      <td>0.005109</td>
      <td>0.007534</td>
    </tr>
    <tr>
      <th>142</th>
      <td>hamib001</td>
      <td>Billy Hamilton</td>
      <td>8</td>
      <td>1476</td>
      <td>0.005420</td>
      <td>0.007822</td>
    </tr>
    <tr>
      <th>289</th>
      <td>rosae001</td>
      <td>Eddie Rosario</td>
      <td>8</td>
      <td>1470</td>
      <td>0.005442</td>
      <td>0.007855</td>
    </tr>
    <tr>
      <th>275</th>
      <td>renda001</td>
      <td>Anthony Rendon</td>
      <td>9</td>
      <td>1564</td>
      <td>0.005754</td>
      <td>0.007966</td>
    </tr>
    <tr>
      <th>8</th>
      <td>alony001</td>
      <td>Yonder Alonso</td>
      <td>8</td>
      <td>1440</td>
      <td>0.005556</td>
      <td>0.008011</td>
    </tr>
  </tbody>
</table>
</div>

<p>It looks to me like players who hit more ground balls are more likely to hit into an error than players who predominately hits fly balls and line-drives. This makes sense since infielders make more errors than outfielders.</p>

<p>Using the posterior distribution of estimated likelihoods to hit into an error, I can assign a probability to whether Carlos Correa is more likely to hit into an error than Daniel Murphy.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">np</span><span class="o">.</span><span class="n">mean</span><span class="p">(</span><span class="n">trace</span><span class="p">[</span><span class="err">‘</span><span class="n">rates</span><span class="err">’</span><span class="p">,</span> <span class="mi">1000</span><span class="p">:][:,</span> <span class="mi">71</span><span class="p">]</span> <span class="o">&amp;</span><span class="n">lt</span><span class="p">;</span><span class="o">=</span> <span class="n">trace</span><span class="p">[</span><span class="err">‘</span><span class="n">rates</span><span class="err">’</span><span class="p">,</span> <span class="mi">1000</span><span class="p">:][:,</span> <span class="mi">226</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></p>

<pre><code>0.0
</code></pre>

<p>The model believes Correa is much more likely to hit into an error than Murphy!</p>

<p>I can also plot these players’ posterior distributions.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">seaborn</span> <span class="kn">as</span> <span class="nn">sns</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">sns</span><span class="o">.</span><span class="n">kdeplot</span><span class="p">(</span><span class="n">trace</span><span class="p">[</span><span class="err">‘</span><span class="n">rates</span><span class="err">’</span><span class="p">,</span> <span class="mi">1000</span><span class="p">:][:,</span> <span class="mi">226</span><span class="p">],</span> <span class="n">shade</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="err">”</span><span class="n">Daniel</span> <span class="n">Murphy</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="n">sns</span><span class="o">.</span><span class="n">kdeplot</span><span class="p">(</span><span class="n">trace</span><span class="p">[</span><span class="err">‘</span><span class="n">rates</span><span class="err">’</span><span class="p">,</span> <span class="mi">1000</span><span class="p">:][:,</span> <span class="mi">71</span><span class="p">],</span> <span class="n">shade</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="err">”</span><span class="n">Carlos</span> <span class="n">Correa</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="n">sns</span><span class="o">.</span><span class="n">kdeplot</span><span class="p">(</span><span class="n">trace</span><span class="p">[</span><span class="err">‘</span><span class="n">rates</span><span class="err">’</span><span class="p">,</span> <span class="mi">1000</span><span class="p">:]</span><span class="o">.</span><span class="n">flatten</span><span class="p">(),</span> <span class="n">shade</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="err">”</span><span class="n">Overall</span><span class="err">”</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/mlb/play_comparison.png" /></p>

<p>Finally, I can look exclusively at how the posterior distributions of the ten most likely and 10 least likely players to hit into an error compare.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="n">sns</span><span class="o">.</span><span class="n">kdeplot</span><span class="p">(</span><span class="n">trace</span><span class="p">[</span><span class="err">‘</span><span class="n">rates</span><span class="err">’</span><span class="p">,</span> <span class="mi">1000</span><span class="p">:][:,</span> <span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">sorted_means_se</span><span class="p">[</span><span class="o">-</span><span class="mi">10</span><span class="p">:]]]</span><span class="o">.</span><span class="n">flatten</span><span class="p">(),</span> <span class="n">shade</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="err">”</span><span class="mi">10</span> <span class="n">Least</span> <span class="n">Likely</span><span class="err">”</span><span class="p">);</span>
</span><span class='line'><span class="n">sns</span><span class="o">.</span><span class="n">kdeplot</span><span class="p">(</span><span class="n">trace</span><span class="p">[</span><span class="err">‘</span><span class="n">rates</span><span class="err">’</span><span class="p">,</span> <span class="mi">1000</span><span class="p">:][:,</span> <span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">sorted_means_se</span><span class="p">[:</span><span class="mi">10</span><span class="p">]]]</span><span class="o">.</span><span class="n">flatten</span><span class="p">(),</span> <span class="n">shade</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="err">”</span><span class="mi">10</span> <span class="n">Most</span> <span class="n">Likely</span><span class="err">”</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p><img src="/images/mlb/top10.png" /></p>

<p>All in all, this analysis makes it obvious that some players are more likely to hit into errors than other players. This is probably driven by how often players hit ground balls.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Predeval]]></title>
    <link href="https://danvatterott.com/blog/2019/01/29/introducing-predeval/"/>
    <updated>2019-01-29T20:27:57-06:00</updated>
    <id>https://danvatterott.com/blog/2019/01/29/introducing-predeval</id>
    <content type="html"><![CDATA[<p><a href="https://predeval.readthedocs.io/en/latest/">Predeval</a> is software designed to help you identify changes in a model’s output.</p>

<p>For instance, you might be tasked with building a model to predict churn. When you deploy this model in production, you have to wait to learn which users churned in order to know how your model performed. While Predeval will not free you from this wait, it can provide initial signals as to whether the model is producing reasonable (i.e., expected) predictions. Unexpected predictions <em>might</em> reflect a poor performing model. They also <em>might</em> reflect a change in your input data. Either way, something has changed and you will want to investigate further.</p>

<p>Using predeval, you can detect changes in model output ASAP. You can then use python’s libraries to build a surrounding alerting system that will signal a need to investigate. This system should give you additional confidence that your model is performing reasonably. Here’s a <a href="https://danvatterott.com/blog/2018/06/02/random-weekly-reminders/">post</a> where I configure an alerting system using python, mailutils, and postfix (although the alerting system is not built around predeval).</p>

<p>Predeval operates by forming expectations about what your model’s outputs will look like. For example, you might give predeval the model’s output from a validation dataset. Predeval will then compare new outputs to the outputs produced by the validation dataset, and will report whether it detects a difference.</p>

<p>Predeval works with models producing both categorical and continuous outputs.</p>

<p>Here’s an <a href="https://predeval.readthedocs.io/en/latest/usage.html#categoricalevaluator">example</a> of predeval with a model producing categorical outputs. Predeval will (by default) check whether all expected output categories are present, and whether the output categories occur at their expected frequencies (using a <a href="https://docs.scipy.org/doc/scipy-0.15.1/reference/generated/scipy.stats.chi2_contingency.html">Chi-square test of independence of variables in a contingency table</a>).</p>

<p>Here’s an <a href="https://predeval.readthedocs.io/en/latest/usage.html#continuousevaluator">example</a> of predeval with a model producing continuous outputs. Predeval will (by default) check whether the new output have a minimum lower than expected, a maximum greater than expected, a different mean, a different standard deviation, and whether the new output are distributed as expected (using a <a href="https://docs.scipy.org/doc/scipy-0.14.0/reference/generated/scipy.stats.ks_2samp.html#scipy.stats.ks_2samp">Kolmogorov-Smirnov test</a>)</p>

<p>I’ve tried to come up with reasonable defaults for determining whether data are different, but you can also <a href="https://predeval.readthedocs.io/en/latest/usage.html#updating-test-parameters">set these thresholds yourself</a>. You can also <a href="https://predeval.readthedocs.io/en/latest/usage.html#changing-evaluation-tests">choose what comparison tests to run</a> (e.g., checking the minimum, maximum etc.).</p>

<p>You will likely need to save your predeval objects so that you can apply them to future data. Here’s an <a href="https://predeval.readthedocs.io/en/latest/usage.html#saving-and-loading-your-evaluator">example</a> of saving the objects.</p>

<p>Documentation about how to install predeval can be found <a href="https://predeval.readthedocs.io/en/latest/installation.html#installation">here</a>.</p>

<p>If you have comments about improvements or would like to <a href="https://predeval.readthedocs.io/en/latest/contributing.html">contribute</a>, please reach out!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Looking Towards the Future of Automated Machine-learning]]></title>
    <link href="https://danvatterott.com/blog/2018/11/03/looking-towards-the-future-of-automated-machine-learning/"/>
    <updated>2018-11-03T08:27:07-05:00</updated>
    <id>https://danvatterott.com/blog/2018/11/03/looking-towards-the-future-of-automated-machine-learning</id>
    <content type="html"><![CDATA[<p>I recently gave a <a href="https://vencafstl.org/event/where-automated-machine-learning-fits-in-your-data-science-toolbox-prepare-ai">presentation</a> at <a href="https://vencafstl.org/">Venture Cafe</a> describing how I see automation changing python, machine-learning workflows in the near future.</p>

<p>In this post, I highlight the presentation’s main points. You can find the slides <a href="https://danvatterott.com/presentations/automation_presentation/">here</a>.</p>

<p>From <a href="https://en.wikipedia.org/wiki/Ray_Kurzweil">Ray Kurzweil’s</a> excitement about a <a href="https://en.wikipedia.org/wiki/Technological_singularity">technological singularity</a> to Elon Musk’s warnings about an <a href="https://www.vanityfair.com/news/2017/03/elon-musk-billion-dollar-crusade-to-stop-ai-space-x">A.I. Apocalypse</a>, automated machine-learning evokes strong feelings. Neither of these futures will be true in the near-term, but where will automation fit in your machine-learning workflows?</p>

<p>Our existing machine-learning workflows might look a little like the following (please forgive the drastic oversimplification of a purely sequential progression across stages!).</p>

<p><img src="/presentations/automation_presentation/slides/data_science_pipeline/ds_pipeline.png" style="background-color:white;" /></p>

<p>Where does automation exist in this workflow? Where can automation improve this workflow?</p>

<p>Not all these stages are within the scope of machine-learning. For instance, while you should automate gathering data, I view this as a data engineering problem. In the image below, I depict the stages that I consider ripe for automation, and the stages I consider wrong for automation. For example, data cleaning is too idiosyncratic to each dataset for true automation. I “X” out model evaluation as wrong for automation. In retrospect, I believe this is a great place for automation, but I don’t know of any existing python packages handling it.</p>

<p><img src="/presentations/automation_presentation/slides/libraries_pipeline/tpot_pipeline.png" style="background-color:white;" /></p>

<p>I depict feature engineering and model selection as the most promising areas for automation. I consider feature engineering as the stage where advances in automation can have the largest impact on your model performance. In the presentation, I include a <a href="https://www.quora.com/What-generally-improves-a-models-score-more-on-average-feature-engineering-or-hyperparameter-tuning">strong quote</a> from a Quora user saying that <a href="https://en.wikipedia.org/wiki/Hyperparameter_optimization">hyper-parameter tuning</a> (a part of model selection) “hardly matters at all.” I agree with the sentiment of this quote, but it’s not true. Choosing roughly the correct hyper-parameter values is <em>VERY</em> important, and choosing the very best hyper-parameter values can be equally important depending on how your model is used. I highlight feature engineering over model selection because automated model selection is largely solved. For example <a href="http://scikit-learn.org/stable/modules/grid_search.html">grid-search</a> automates model selection. It’s not a fast solution, but given infinite time, it will find the best hyper-parameter values!</p>

<p>There are many python libraries automating these parts of the workflow. I highlight three libraries that automate feature engineering.</p>

<p><img src="/presentations/automation_presentation/slides/feature_automation/tpot-logo.jpg" width="200" style="background-color:white;" /></p>

<p>The first is <a href="https://github.com/EpistasisLab/tpot">teapot</a>. Teapot (more or less) takes all the different operations and models available in <a href="http://scikit-learn.org/stable/">scikit-learn</a>, and allows you to assemble these operations into a pipeline. Many of these operations (e.g., <a href="https://en.wikipedia.org/wiki/Principal_component_analysis">PCA</a>) are forms of feature engineering. Teapot measures which operations lead to the best model performance. Because Teapot enables users to assemble <em>SO MANY</em> different operations, it utilizes a <a href="https://en.wikipedia.org/wiki/Genetic_algorithm">genetic search algorithm</a> to search through the different possibilities more efficiently than grid-search would.</p>

<p>The second is <a href="https://github.com/ClimbsRocks/auto_ml">auto_ml</a>. In auto_ml users simply pass a dataset to the software and it will do model selection and hyper-parameter tuning for you. Users can also <a href="https://auto-ml.readthedocs.io/en/latest/deep_learning.html#feature-learning">ask the software to train a deep learning model that will learn new features</a> from your dataset. The authors claim this approach can improve model accuracy by 5%.</p>

<p><img src="/presentations/automation_presentation/slides/feature_automation/featuretools.png" width="400" style="background-color:white;" /></p>

<p>The third is <a href="https://github.com/Featuretools/featuretools">feature tools</a>. Feature Tools is the piece of automation software whose future I am most excited about. I find this software exciting because users can feed it pre-aggregated data. Most machine-learning models expect that for each value of the <a href="https://www.quora.com/What-is-a-response-variable-in-statistics">response variable</a>, you supply a vector of explanatory variables. This is an example of aggregated data. Teapot and auto_ml both expect users to supply aggregated data. Lots of important information is lost in the aggregation process, and allowing automation to thoroughly explore different aggregations will lead to predictive features that we would not have created otherwise (any many believe this is why deep learning is so effective). Feature tools explores different aggregations all while creating easily interpreted variables (in contrast to deep learning). While I am excited about the future of feature tools, it is a new piece of software and has a ways to go before I use it in my workflows. Like most automation machine-learning software it’s very slow/resource intensive. Also, the software is not very intuitive. That said, I created a <a href="https://mybinder.org/v2/gh/dvatterott/explore_feature_automation/master">binder notebook</a> demoing feature tools, so check it out yourself!</p>

<p>We should always keep in mind the possible dangers of automation and machine-learning. Removing humans from decisions accentuates biases baked into data and algorithms. These accentuated biases can have dangerous effects. We should carefully choose which decisions we’re comfortable automating and what safeguards to build around these decisions. Check out <a href="https://en.wikipedia.org/wiki/Cathy_O%27Neil">Cathy O’Neil’s</a> amazing <a href="https://en.wikipedia.org/wiki/Weapons_of_Math_Destruction">Weapons for Math Destruction</a> for an excellent treatment of the topic.</p>

<p>This post makes no attempt to give an exhaustive view of automated machine-learning. This is my single view point on where I think automated machine-learning can have an impact on your python workflows in the near-term. For a more thorough view of automated machine-learning, check out this <a href="https://twitter.com/randal_olson/status/992105498894831616">presentation</a> by <a href="http://www.randalolson.com/">Randy Olson</a> (the creator of teapot).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Custom Email Alerts in Airflow]]></title>
    <link href="https://danvatterott.com/blog/2018/08/29/custom-email-alerts-in-airflow/"/>
    <updated>2018-08-29T18:19:42-05:00</updated>
    <id>https://danvatterott.com/blog/2018/08/29/custom-email-alerts-in-airflow</id>
    <content type="html"><![CDATA[<p><a href="https://airflow.apache.org/">Apache Airflow</a> is great for coordinating automated jobs, and it provides a simple interface for sending email alerts when these jobs fail. Typically, one can request these emails by setting <code>email_on_failure</code> to <code>True</code> in your operators.</p>

<p>These email alerts work great, but I wanted to include additional links in them (I wanted to include a link to my spark cluster which can be grabbed from the <a href="https://airflow.incubator.apache.org/_modules/airflow/contrib/operators/databricks_operator.html#DatabricksSubmitRunOperator">Databricks Operator</a>). Here’s how I created a custom email alert on job failure.</p>

<p>First, I set <code>email_on_failure</code> to <code>False</code> and use the operators’s <code>on_failure_callback</code>. I give <code>on_failure_callback</code> the function described below.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">airflow.utils.email</span> <span class="kn">import</span> <span class="n">send_email</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">notify_email</span><span class="p">(</span><span class="n">contextDict</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
</span><span class='line'>    <span class="err">“</span><span class="s">&quot;”Send custom email alerts.”””&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="c"># email title.</span>
</span><span class='line'><span class="n">title</span> <span class="o">=</span> <span class="s">&quot;Airflow alert: {task_name} Failed&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="n">contextDict</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c"># email contents</span>
</span><span class='line'><span class="n">body</span> <span class="o">=</span> <span class="s">&quot;&quot;&quot;</span>
</span><span class='line'><span class="s">Hi Everyone, &amp;lt;br&amp;gt;</span>
</span><span class='line'><span class="s">&amp;lt;br&amp;gt;</span>
</span><span class='line'><span class="s">There&#39;s been an error in the {task_name} job.&amp;lt;br&amp;gt;</span>
</span><span class='line'><span class="s">&amp;lt;br&amp;gt;</span>
</span><span class='line'><span class="s">Forever yours,&amp;lt;br&amp;gt;</span>
</span><span class='line'><span class="s">Airflow bot &amp;lt;br&amp;gt;</span>
</span><span class='line'><span class="s">&quot;&quot;&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="o">**</span><span class="n">contextDict</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">send_email</span><span class="p">(</span><span class="s">&#39;you_email@address.com&#39;</span><span class="p">,</span> <span class="n">title</span><span class="p">,</span> <span class="n">body</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>
</code></pre>

<p><code>send_email</code> is a function imported from Airflow. <code>contextDict</code> is a dictionary given to the callback function on error. Importantly, <code>contextDict</code> contains lots of relevant information. This includes the Task Instance (key=’ti’) and Operator Instance (key=’task’) associated with your error. I was able to use the Operator Instance, to grab the relevant cluster’s address and I included this address in my email (this exact code is not present here).</p>

<p>To use the <code>notify_email</code>, I set <code>on_failure_callback</code> equal to <code>notify_email</code>.</p>

<p>I write out a short example airflow dag below.</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">from</span> <span class="nn">airflow.models</span> <span class="kn">import</span> <span class="n">DAG</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">airflow.operators</span> <span class="kn">import</span> <span class="n">PythonOperator</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">airflow.utils.dates</span> <span class="kn">import</span> <span class="n">days_ago</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">args</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="err">‘</span><span class="n">owner</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">me</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>  <span class="err">‘</span><span class="n">description</span><span class="err">’</span><span class="p">:</span> <span class="err">‘</span><span class="n">my_example</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>  <span class="err">‘</span><span class="n">start_date</span><span class="err">’</span><span class="p">:</span> <span class="n">days_ago</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">h1</span> <span class="nb">id</span><span class="o">=</span><span class="s">&quot;run-every-day-at-1205-utc&quot;</span><span class="o">&gt;</span><span class="n">run</span> <span class="n">every</span> <span class="n">day</span> <span class="n">at</span> <span class="mi">12</span><span class="p">:</span><span class="mo">05</span> <span class="n">UTC</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">dag</span> <span class="o">=</span> <span class="n">DAG</span><span class="p">(</span><span class="n">dag_id</span><span class="o">=</span><span class="err">’</span><span class="n">example_dag</span><span class="err">’</span><span class="p">,</span> <span class="n">default_args</span><span class="o">=</span><span class="n">args</span><span class="p">,</span> <span class="n">schedule_interval</span><span class="o">=</span><span class="err">’</span><span class="mi">0</span> <span class="mi">5</span> <span class="o">*</span> <span class="o">*</span> <span class="o">*</span><span class="err">’</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">print_hello</span><span class="p">():</span>
</span><span class='line'>  <span class="k">return</span> <span class="err">‘</span><span class="n">hello</span><span class="err">!’</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">py_task</span> <span class="o">=</span> <span class="n">PythonOperator</span><span class="p">(</span><span class="n">task_id</span><span class="o">=</span><span class="err">’</span><span class="n">example</span><span class="err">’</span><span class="p">,</span>
</span><span class='line'>                         <span class="n">python_callable</span><span class="o">=</span><span class="n">print_hello</span><span class="p">,</span>
</span><span class='line'>                         <span class="n">on_failure_callback</span><span class="o">=</span><span class="n">notify_email</span><span class="p">,</span>
</span><span class='line'>                         <span class="n">dag</span><span class="o">=</span><span class="n">dag</span><span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">py_task</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Note where set <code>on_failure_callback</code> equal to <code>notify_email</code> in the <code>PythonOperator</code>.</p>

<p>Hope you find this helpful! Don’t hesitate to reach out if you have a question.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Integrating Apache Airflow and Databricks]]></title>
    <link href="https://danvatterott.com/blog/2018/06/13/integrating-apache-airflow-and-databricks/"/>
    <updated>2018-06-13T18:05:52-05:00</updated>
    <id>https://danvatterott.com/blog/2018/06/13/integrating-apache-airflow-and-databricks</id>
    <content type="html"><![CDATA[<p>Cron is great for automation, but when tasks begin to rely on each other (task C can only run after both tasks A and B finish) cron does not do the trick.</p>

<p><a href="https://airflow.apache.org/">Apache Airflow</a> is open source software (from airbnb) designed to handle the relationship between tasks. I recently setup an airflow server which coordinates automated jobs on <a href="https://databricks.com/">databricks</a> (great software for coordinating spark clusters). Connecting databricks and airflow ended up being a little trickier than it should have been, so I am writing this blog post as a resource to anyone else who attempts to do the same in the future.</p>

<p>For the most part I followed <a href="https://medium.com/a-r-g-o/installing-apache-airflow-on-ubuntu-aws-6ebac15db211">this tutorial from A-R-G-O</a> when setting up airflow. Databricks also has a decent <a href="https://docs.databricks.com/user-guide/dev-tools/data-pipelines.html">tutorial</a> on setting up airflow. The difficulty here is that the airflow software for talking to databricks clusters (DatabricksSubmitRunOperator) was not introduced into airflow until version 1.9 and the A-R-G-O tutorial uses airflow 1.8.</p>

<p>Airflow 1.9 uses Celery version &gt;= 4.0 (I ended up using Celery version 4.1.1). Airflow 1.8 requires Celery &lt; 4.0. In fact, the A-R-G-O tutorial notes that using Celery &gt;= 4.0 will result in the error:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>airflow worker: Received and deleted unknown message. Wrong destination?!?</span></code></pre></td></tr></table></div></figure></p>

<p>I can attest that this is true! If you use airflow 1.9 with Celery &lt; 4.0, everything might appear to work, but airflow will randomly stop scheduling jobs after awhile (check the airflow-scheduler logs if you run into this). You need to use Celery &gt;= 4.0! Preventing the Wrong destination error is easy, but the fix is hard to find (hence why I wrote this post).</p>

<p>After much ado, here’s the fix! If you follow the A-R-G-O tutorial, install airflow 1.9, celery &gt;=4.0 AND set broker_url in airflow.cfg as follows:</p>

<p><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>broker_url = pyamqp://guest:guest@localhost:5672//</span></code></pre></td></tr></table></div></figure></p>

<p>Note that compared to the A-R-G-O tutorial, I am just adding “py” in front of amqp. Easy!</p>
]]></content>
  </entry>
  
</feed>
